I0
  [ PROGRAM' -> .PROGRAM, $]
  [ PROGRAM -> .DECL_LIST, $]
  [ DECL_LIST -> .DECL_LIST DECL, $]
  [ DECL_LIST -> .DECL, $]
  [ DECL -> .VAR_DECL, $]
  [ DECL -> .FUNC_DECL, $]
  [ DECL -> .COMMENT, $]
  [ VAR_DECL -> .TYPE_SPEC ID ;, $]
  [ VAR_DECL -> .TYPE_SPEC ID = EXP ;, $]
  [ FUNC_DECL -> .TYPE_SPEC ID ( PARAMS ) COMPOUND_STMT, $]
  [ FUNC_DECL -> .TYPE_SPEC ID ( ) COMPOUND_STMT, $]
  [ TYPE_SPEC -> .INT, $]
  [ TYPE_SPEC -> .FLOAT, $]
  [ TYPE_SPEC -> .CHAR, $]
  [ TYPE_SPEC -> .VOID, $]
I1
  [ PROGRAM' -> PROGRAM., $]
I2
  [ PROGRAM -> DECL_LIST., $]
  [ DECL_LIST -> DECL_LIST .DECL, $]
  [ DECL -> .VAR_DECL, $]
  [ DECL -> .FUNC_DECL, $]
  [ DECL -> .COMMENT, $]
  [ VAR_DECL -> .TYPE_SPEC ID ;, $]
  [ VAR_DECL -> .TYPE_SPEC ID = EXP ;, $]
  [ FUNC_DECL -> .TYPE_SPEC ID ( PARAMS ) COMPOUND_STMT, $]
  [ FUNC_DECL -> .TYPE_SPEC ID ( ) COMPOUND_STMT, $]
  [ TYPE_SPEC -> .INT, $]
  [ TYPE_SPEC -> .FLOAT, $]
  [ TYPE_SPEC -> .CHAR, $]
  [ TYPE_SPEC -> .VOID, $]
I3
  [ DECL_LIST -> DECL., $]
I4
  [ DECL -> VAR_DECL., COMMENT/INT/FLOAT/CHAR/VOID]
I5
  [ DECL -> FUNC_DECL., COMMENT/INT/FLOAT/CHAR/VOID]
I6
  [ DECL -> COMMENT., COMMENT/INT/FLOAT/CHAR/VOID]
I7
  [ VAR_DECL -> TYPE_SPEC .ID ;, $]
  [ VAR_DECL -> TYPE_SPEC .ID = EXP ;, $]
  [ FUNC_DECL -> TYPE_SPEC .ID ( PARAMS ) COMPOUND_STMT, $]
  [ FUNC_DECL -> TYPE_SPEC .ID ( ) COMPOUND_STMT, $]
I8
  [ TYPE_SPEC -> INT., ID/;/IF/FOR/INT/FLOAT/CHAR/VOID/NUMBER/(/COMMENT/,]
I9
  [ TYPE_SPEC -> FLOAT., ID/;/IF/FOR/INT/FLOAT/CHAR/VOID/NUMBER/(/COMMENT/,]
I10
  [ TYPE_SPEC -> CHAR., ID/;/IF/FOR/INT/FLOAT/CHAR/VOID/NUMBER/(/COMMENT/,]
I11
  [ TYPE_SPEC -> VOID., ID/;/IF/FOR/INT/FLOAT/CHAR/VOID/NUMBER/(/COMMENT/,]
I12
  [ DECL_LIST -> DECL_LIST DECL., COMMENT/INT/FLOAT/CHAR/VOID]
I13
  [ VAR_DECL -> TYPE_SPEC ID .;, $]
  [ VAR_DECL -> TYPE_SPEC ID .= EXP ;, $]
  [ FUNC_DECL -> TYPE_SPEC ID .( PARAMS ) COMPOUND_STMT, $]
  [ FUNC_DECL -> TYPE_SPEC ID .( ) COMPOUND_STMT, $]
I14
  [ VAR_DECL -> TYPE_SPEC ID ;., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I15
  [ VAR_DECL -> TYPE_SPEC ID = .EXP ;, $]
  [ EXP -> .SIMPLE_EXP, $]
  [ EXP -> .SIMPLE_EXP COMP_OP SIMPLE_EXP, $]
  [ SIMPLE_EXP -> .ASSIGN_EXP, $]
  [ SIMPLE_EXP -> .TERM ADDOP TERM, $]
  [ SIMPLE_EXP -> .TERM, $]
  [ ASSIGN_EXP -> .ID = EXP, $]
  [ TERM -> .TERM MULOP FACTOR, $]
  [ TERM -> .FACTOR, $]
  [ FACTOR -> .NUMBER, $]
  [ FACTOR -> .ID, $]
  [ FACTOR -> .( EXP ), $]
I16
  [ FUNC_DECL -> TYPE_SPEC ID ( .PARAMS ) COMPOUND_STMT, $]
  [ FUNC_DECL -> TYPE_SPEC ID ( .) COMPOUND_STMT, $]
  [ PARAMS -> .PARAM_LIST, $]
  [ PARAMS -> .VOID, $]
  [ PARAM_LIST -> .PARAM_LIST , PARAM, $]
  [ PARAM_LIST -> .PARAM, $]
  [ PARAM -> .TYPE_SPEC ID, $]
  [ TYPE_SPEC -> .INT, $]
  [ TYPE_SPEC -> .FLOAT, $]
  [ TYPE_SPEC -> .CHAR, $]
  [ TYPE_SPEC -> .VOID, $]
I17
  [ VAR_DECL -> TYPE_SPEC ID = EXP .;, $]
I18
  [ EXP -> SIMPLE_EXP., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/EQU/LTE/GTE/LT/GT/+/-/*//]
  [ EXP -> SIMPLE_EXP .COMP_OP SIMPLE_EXP, $]
  [ COMP_OP -> .EQU, $]
  [ COMP_OP -> .LTE, $]
  [ COMP_OP -> .GTE, $]
  [ COMP_OP -> .LT, $]
  [ COMP_OP -> .GT, $]
I19
  [ SIMPLE_EXP -> ASSIGN_EXP., EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-/*//]
I20
  [ SIMPLE_EXP -> TERM .ADDOP TERM, $]
  [ SIMPLE_EXP -> TERM., EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-/*//]
  [ TERM -> TERM .MULOP FACTOR, $]
  [ ADDOP -> .+, $]
  [ ADDOP -> .-, $]
  [ MULOP -> .*, $]
  [ MULOP -> ./, $]
I21
  [ ASSIGN_EXP -> ID .= EXP, $]
  [ FACTOR -> ID., EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-/*//]
I22
  [ TERM -> FACTOR., EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-/*//]
I23
  [ FACTOR -> NUMBER., EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-/*//]
I24
  [ FACTOR -> ( .EXP ), $]
  [ EXP -> .SIMPLE_EXP, $]
  [ EXP -> .SIMPLE_EXP COMP_OP SIMPLE_EXP, $]
  [ SIMPLE_EXP -> .ASSIGN_EXP, $]
  [ SIMPLE_EXP -> .TERM ADDOP TERM, $]
  [ SIMPLE_EXP -> .TERM, $]
  [ ASSIGN_EXP -> .ID = EXP, $]
  [ TERM -> .TERM MULOP FACTOR, $]
  [ TERM -> .FACTOR, $]
  [ FACTOR -> .NUMBER, $]
  [ FACTOR -> .ID, $]
  [ FACTOR -> .( EXP ), $]
I25
  [ FUNC_DECL -> TYPE_SPEC ID ( PARAMS .) COMPOUND_STMT, $]
I26
  [ FUNC_DECL -> TYPE_SPEC ID ( ) .COMPOUND_STMT, $]
  [ COMPOUND_STMT -> .{ STMT_LIST }, $]
I27
  [ PARAMS -> PARAM_LIST., COMMENT/INT/FLOAT/CHAR/VOID]
  [ PARAM_LIST -> PARAM_LIST ., PARAM, $]
I28
  [ PARAMS -> VOID., COMMENT/INT/FLOAT/CHAR/VOID]
  [ TYPE_SPEC -> VOID., ID/COMMENT/INT/FLOAT/CHAR/VOID]
I29
  [ PARAM_LIST -> PARAM., COMMENT/INT/FLOAT/CHAR/VOID]
I30
  [ PARAM -> TYPE_SPEC .ID, $]
I31
  [ VAR_DECL -> TYPE_SPEC ID = EXP ;., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I32
  [ EXP -> SIMPLE_EXP COMP_OP .SIMPLE_EXP, $]
  [ SIMPLE_EXP -> .ASSIGN_EXP, $]
  [ SIMPLE_EXP -> .TERM ADDOP TERM, $]
  [ SIMPLE_EXP -> .TERM, $]
  [ ASSIGN_EXP -> .ID = EXP, $]
  [ TERM -> .TERM MULOP FACTOR, $]
  [ TERM -> .FACTOR, $]
  [ FACTOR -> .NUMBER, $]
  [ FACTOR -> .ID, $]
  [ FACTOR -> .( EXP ), $]
I33
  [ COMP_OP -> EQU., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/EQU/LTE/GTE/LT/GT/+/-/*//]
I34
  [ COMP_OP -> LTE., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/EQU/LTE/GTE/LT/GT/+/-/*//]
I35
  [ COMP_OP -> GTE., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/EQU/LTE/GTE/LT/GT/+/-/*//]
I36
  [ COMP_OP -> LT., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/EQU/LTE/GTE/LT/GT/+/-/*//]
I37
  [ COMP_OP -> GT., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/EQU/LTE/GTE/LT/GT/+/-/*//]
I38
  [ SIMPLE_EXP -> TERM ADDOP .TERM, $]
  [ TERM -> .TERM MULOP FACTOR, $]
  [ TERM -> .FACTOR, $]
  [ FACTOR -> .NUMBER, $]
  [ FACTOR -> .ID, $]
  [ FACTOR -> .( EXP ), $]
I39
  [ TERM -> TERM MULOP .FACTOR, $]
  [ FACTOR -> .NUMBER, $]
  [ FACTOR -> .ID, $]
  [ FACTOR -> .( EXP ), $]
I40
  [ ADDOP -> +., EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-/*//]
I41
  [ ADDOP -> -., EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-/*//]
I42
  [ MULOP -> *., *///EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-]
I43
  [ MULOP -> /., *///EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-]
I44
  [ ASSIGN_EXP -> ID = .EXP, $]
  [ EXP -> .SIMPLE_EXP, $]
  [ EXP -> .SIMPLE_EXP COMP_OP SIMPLE_EXP, $]
  [ SIMPLE_EXP -> .ASSIGN_EXP, $]
  [ SIMPLE_EXP -> .TERM ADDOP TERM, $]
  [ SIMPLE_EXP -> .TERM, $]
  [ ASSIGN_EXP -> .ID = EXP, $]
  [ TERM -> .TERM MULOP FACTOR, $]
  [ TERM -> .FACTOR, $]
  [ FACTOR -> .NUMBER, $]
  [ FACTOR -> .ID, $]
  [ FACTOR -> .( EXP ), $]
I45
  [ FACTOR -> ( EXP .), $]
I46
  [ FUNC_DECL -> TYPE_SPEC ID ( PARAMS ) .COMPOUND_STMT, $]
  [ COMPOUND_STMT -> .{ STMT_LIST }, $]
I47
  [ FUNC_DECL -> TYPE_SPEC ID ( ) COMPOUND_STMT., COMMENT/INT/FLOAT/CHAR/VOID]
I48
  [ COMPOUND_STMT -> { .STMT_LIST }, $]
  [ STMT_LIST -> .STMT_LIST STMT, $]
  [ STMT_LIST -> .STMT, $]
  [ STMT_LIST -> .COMMENT, $]
  [ STMT -> .EXP_STMT, $]
  [ STMT -> .IF_STMT, $]
  [ STMT -> .FOR_STMT, $]
  [ STMT -> .VAR_DECL, $]
  [ EXP_STMT -> .EXP ;, $]
  [ EXP_STMT -> .;, $]
  [ IF_STMT -> .IF ( EXP ) COMPOUND_STMT, $]
  [ IF_STMT -> .IF ( EXP ) COMPOUND_STMT ELSE COMPOUND_STMT, $]
  [ FOR_STMT -> .FOR ( EXP ; EXP ; EXP ) COMPOUND_STMT, $]
  [ VAR_DECL -> .TYPE_SPEC ID ;, $]
  [ VAR_DECL -> .TYPE_SPEC ID = EXP ;, $]
  [ EXP -> .SIMPLE_EXP, $]
  [ EXP -> .SIMPLE_EXP COMP_OP SIMPLE_EXP, $]
  [ TYPE_SPEC -> .INT, $]
  [ TYPE_SPEC -> .FLOAT, $]
  [ TYPE_SPEC -> .CHAR, $]
  [ TYPE_SPEC -> .VOID, $]
  [ SIMPLE_EXP -> .ASSIGN_EXP, $]
  [ SIMPLE_EXP -> .TERM ADDOP TERM, $]
  [ SIMPLE_EXP -> .TERM, $]
  [ ASSIGN_EXP -> .ID = EXP, $]
  [ TERM -> .TERM MULOP FACTOR, $]
  [ TERM -> .FACTOR, $]
  [ FACTOR -> .NUMBER, $]
  [ FACTOR -> .ID, $]
  [ FACTOR -> .( EXP ), $]
I49
  [ PARAM_LIST -> PARAM_LIST , .PARAM, $]
  [ PARAM -> .TYPE_SPEC ID, $]
  [ TYPE_SPEC -> .INT, $]
  [ TYPE_SPEC -> .FLOAT, $]
  [ TYPE_SPEC -> .CHAR, $]
  [ TYPE_SPEC -> .VOID, $]
I50
  [ PARAM -> TYPE_SPEC ID., ,/COMMENT/INT/FLOAT/CHAR/VOID]
I51
  [ EXP -> SIMPLE_EXP COMP_OP SIMPLE_EXP., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/EQU/LTE/GTE/LT/GT/+/-/*//]
I52
  [ SIMPLE_EXP -> TERM ADDOP TERM., EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-/*//]
  [ TERM -> TERM .MULOP FACTOR, $]
  [ MULOP -> .*, $]
  [ MULOP -> ./, $]
I53
  [ FACTOR -> ID., *///EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-]
I54
  [ TERM -> TERM MULOP FACTOR., *///EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-]
I55
  [ ASSIGN_EXP -> ID = EXP., EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-/*//]
I56
  [ FACTOR -> ( EXP )., EQU/LTE/GTE/LT/GT/;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT/+/-/*//]
I57
  [ FUNC_DECL -> TYPE_SPEC ID ( PARAMS ) COMPOUND_STMT., COMMENT/INT/FLOAT/CHAR/VOID]
I58
  [ COMPOUND_STMT -> { STMT_LIST .}, $]
  [ STMT_LIST -> STMT_LIST .STMT, $]
  [ STMT -> .EXP_STMT, $]
  [ STMT -> .IF_STMT, $]
  [ STMT -> .FOR_STMT, $]
  [ STMT -> .VAR_DECL, $]
  [ EXP_STMT -> .EXP ;, $]
  [ EXP_STMT -> .;, $]
  [ IF_STMT -> .IF ( EXP ) COMPOUND_STMT, $]
  [ IF_STMT -> .IF ( EXP ) COMPOUND_STMT ELSE COMPOUND_STMT, $]
  [ FOR_STMT -> .FOR ( EXP ; EXP ; EXP ) COMPOUND_STMT, $]
  [ VAR_DECL -> .TYPE_SPEC ID ;, $]
  [ VAR_DECL -> .TYPE_SPEC ID = EXP ;, $]
  [ EXP -> .SIMPLE_EXP, $]
  [ EXP -> .SIMPLE_EXP COMP_OP SIMPLE_EXP, $]
  [ TYPE_SPEC -> .INT, $]
  [ TYPE_SPEC -> .FLOAT, $]
  [ TYPE_SPEC -> .CHAR, $]
  [ TYPE_SPEC -> .VOID, $]
  [ SIMPLE_EXP -> .ASSIGN_EXP, $]
  [ SIMPLE_EXP -> .TERM ADDOP TERM, $]
  [ SIMPLE_EXP -> .TERM, $]
  [ ASSIGN_EXP -> .ID = EXP, $]
  [ TERM -> .TERM MULOP FACTOR, $]
  [ TERM -> .FACTOR, $]
  [ FACTOR -> .NUMBER, $]
  [ FACTOR -> .ID, $]
  [ FACTOR -> .( EXP ), $]
I59
  [ STMT_LIST -> STMT., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I60
  [ STMT_LIST -> COMMENT., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I61
  [ STMT -> EXP_STMT., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I62
  [ STMT -> IF_STMT., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I63
  [ STMT -> FOR_STMT., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I64
  [ STMT -> VAR_DECL., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I65
  [ EXP_STMT -> EXP .;, $]
I66
  [ EXP_STMT -> ;., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I67
  [ IF_STMT -> IF .( EXP ) COMPOUND_STMT, $]
  [ IF_STMT -> IF .( EXP ) COMPOUND_STMT ELSE COMPOUND_STMT, $]
I68
  [ FOR_STMT -> FOR .( EXP ; EXP ; EXP ) COMPOUND_STMT, $]
I69
  [ VAR_DECL -> TYPE_SPEC .ID ;, $]
  [ VAR_DECL -> TYPE_SPEC .ID = EXP ;, $]
I70
  [ PARAM_LIST -> PARAM_LIST , PARAM., ,/COMMENT/INT/FLOAT/CHAR/VOID]
I71
  [ COMPOUND_STMT -> { STMT_LIST }., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I72
  [ STMT_LIST -> STMT_LIST STMT., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I73
  [ EXP_STMT -> EXP ;., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I74
  [ IF_STMT -> IF ( .EXP ) COMPOUND_STMT, $]
  [ IF_STMT -> IF ( .EXP ) COMPOUND_STMT ELSE COMPOUND_STMT, $]
  [ EXP -> .SIMPLE_EXP, $]
  [ EXP -> .SIMPLE_EXP COMP_OP SIMPLE_EXP, $]
  [ SIMPLE_EXP -> .ASSIGN_EXP, $]
  [ SIMPLE_EXP -> .TERM ADDOP TERM, $]
  [ SIMPLE_EXP -> .TERM, $]
  [ ASSIGN_EXP -> .ID = EXP, $]
  [ TERM -> .TERM MULOP FACTOR, $]
  [ TERM -> .FACTOR, $]
  [ FACTOR -> .NUMBER, $]
  [ FACTOR -> .ID, $]
  [ FACTOR -> .( EXP ), $]
I75
  [ FOR_STMT -> FOR ( .EXP ; EXP ; EXP ) COMPOUND_STMT, $]
  [ EXP -> .SIMPLE_EXP, $]
  [ EXP -> .SIMPLE_EXP COMP_OP SIMPLE_EXP, $]
  [ SIMPLE_EXP -> .ASSIGN_EXP, $]
  [ SIMPLE_EXP -> .TERM ADDOP TERM, $]
  [ SIMPLE_EXP -> .TERM, $]
  [ ASSIGN_EXP -> .ID = EXP, $]
  [ TERM -> .TERM MULOP FACTOR, $]
  [ TERM -> .FACTOR, $]
  [ FACTOR -> .NUMBER, $]
  [ FACTOR -> .ID, $]
  [ FACTOR -> .( EXP ), $]
I76
  [ VAR_DECL -> TYPE_SPEC ID .;, $]
  [ VAR_DECL -> TYPE_SPEC ID .= EXP ;, $]
I77
  [ IF_STMT -> IF ( EXP .) COMPOUND_STMT, $]
  [ IF_STMT -> IF ( EXP .) COMPOUND_STMT ELSE COMPOUND_STMT, $]
I78
  [ FOR_STMT -> FOR ( EXP .; EXP ; EXP ) COMPOUND_STMT, $]
I79
  [ IF_STMT -> IF ( EXP ) .COMPOUND_STMT, $]
  [ IF_STMT -> IF ( EXP ) .COMPOUND_STMT ELSE COMPOUND_STMT, $]
  [ COMPOUND_STMT -> .{ STMT_LIST }, $]
I80
  [ FOR_STMT -> FOR ( EXP ; .EXP ; EXP ) COMPOUND_STMT, $]
  [ EXP -> .SIMPLE_EXP, $]
  [ EXP -> .SIMPLE_EXP COMP_OP SIMPLE_EXP, $]
  [ SIMPLE_EXP -> .ASSIGN_EXP, $]
  [ SIMPLE_EXP -> .TERM ADDOP TERM, $]
  [ SIMPLE_EXP -> .TERM, $]
  [ ASSIGN_EXP -> .ID = EXP, $]
  [ TERM -> .TERM MULOP FACTOR, $]
  [ TERM -> .FACTOR, $]
  [ FACTOR -> .NUMBER, $]
  [ FACTOR -> .ID, $]
  [ FACTOR -> .( EXP ), $]
I81
  [ IF_STMT -> IF ( EXP ) COMPOUND_STMT., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
  [ IF_STMT -> IF ( EXP ) COMPOUND_STMT .ELSE COMPOUND_STMT, $]
I82
  [ FOR_STMT -> FOR ( EXP ; EXP .; EXP ) COMPOUND_STMT, $]
I83
  [ IF_STMT -> IF ( EXP ) COMPOUND_STMT ELSE .COMPOUND_STMT, $]
  [ COMPOUND_STMT -> .{ STMT_LIST }, $]
I84
  [ FOR_STMT -> FOR ( EXP ; EXP ; .EXP ) COMPOUND_STMT, $]
  [ EXP -> .SIMPLE_EXP, $]
  [ EXP -> .SIMPLE_EXP COMP_OP SIMPLE_EXP, $]
  [ SIMPLE_EXP -> .ASSIGN_EXP, $]
  [ SIMPLE_EXP -> .TERM ADDOP TERM, $]
  [ SIMPLE_EXP -> .TERM, $]
  [ ASSIGN_EXP -> .ID = EXP, $]
  [ TERM -> .TERM MULOP FACTOR, $]
  [ TERM -> .FACTOR, $]
  [ FACTOR -> .NUMBER, $]
  [ FACTOR -> .ID, $]
  [ FACTOR -> .( EXP ), $]
I85
  [ IF_STMT -> IF ( EXP ) COMPOUND_STMT ELSE COMPOUND_STMT., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
I86
  [ FOR_STMT -> FOR ( EXP ; EXP ; EXP .) COMPOUND_STMT, $]
I87
  [ FOR_STMT -> FOR ( EXP ; EXP ; EXP ) .COMPOUND_STMT, $]
  [ COMPOUND_STMT -> .{ STMT_LIST }, $]
I88
  [ FOR_STMT -> FOR ( EXP ; EXP ; EXP ) COMPOUND_STMT., ;/IF/FOR/INT/FLOAT/CHAR/VOID/ID/NUMBER/(/COMMENT]
