# C-- language
%{
# TODO: To implement array, struct/class

import enum

class OpType(enum.IntEnum):
    TERMINAL = 0
    NUMBER = 1
    ID = 2
    EXP = 3
    ASSIGN_EXP = 4
    STMT = 5
    IF_STMT = 6
    FOR_STMT = 7
    WHILE_STMT = 8
    TERM = 9
    VAR_DECL = 10
    FUNC_DECL = 11
    RETURN = 12
    FUNC_CALL = 13
    STRING = 14
    COMMENT = 15
    INCREMENT = 16
    DECREMENT = 17
    VAR_ARRAY_DECL = 18
    COMPOUND_STMT = 19

class TreeNode:
    def __init__(self):
        self.type = None    # reduced symbol type
        self.text = ''
        self.value = None
        self.idx_line = 0
        self.idx_col = 0
        self.symtab = None  # Symbol Table

        self.op_type = OpType.TERMINAL
        self.next = None
        self.childs = [None] * 4    # index 0 and 1 are dedicated to left and right child nodes in EXP nodes.
        self.visited = False        # visit flag for EXP node tree traverse.
%}

%%

PROGRAM : DECL_LIST {
    $$ = $1
}
;

DECL_LIST : DECL_LIST DECL {
    $$ = $1
    
    append_node($$, $2)
} |
DECL
{
    $$ = $1
}
;

DECL : VAR_DECL | FUNC_DECL | 
COMMENT {
    $$ = $1
    $1.op_type = OpType.COMMENT
}
;

VAR_DECL : TYPE_SPEC ID ';'
{
    $$ = TreeNode()
    $$.op_type = OpType.VAR_DECL
    $$.childs[0] = $1
    $$.childs[1] = $2
} |
TYPE_SPEC ID '=' EXP ';'{   
    $$ = TreeNode()
    $$.op_type = OpType.VAR_DECL
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $4
} |
TYPE_SPEC ID '[' NUMBER ']' ';'{   
    $$ = TreeNode()
    $$.op_type = OpType.VAR_ARRAY_DECL
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $4
}
;

FUNC_DECL : TYPE_SPEC ID '(' PARAMS ')' COMPOUND_STMT {
    $$ = TreeNode()
    $$.op_type = OpType.FUNC_DECL
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $4
    $$.childs[3] = $6

} |
TYPE_SPEC ID '(' ')' COMPOUND_STMT {
    $$ = TreeNode()
    $$.op_type = OpType.FUNC_DECL
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = None
    $$.childs[3] = $5
}
;

TYPE_SPEC : INT | FLOAT | CHAR | VOID;

PARAMS : PARAM_LIST | VOID;

PARAM_LIST : PARAM_LIST ',' PARAM {
    $$ = $1
    append_node($$, $3)
} |
PARAM;

PARAM : TYPE_SPEC ID {
    $$ = TreeNode()
    $$.op_type = OpType.VAR_DECL
    $$.childs[0] = $1
    $$.childs[1] = $2
} |
TYPE_SPEC ID '[' NUMBER ']' {
    $$ = TreeNode()
    $$.op_type = OpType.VAR_ARRAY_DECL
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[1] = $4
}
;

COMPOUND_STMT : '{' STMT_LIST '}' {
    $$ = TreeNode()
    $$.op_type = OpType.COMPOUND_STMT
    $$.childs[0] = $2;
}
;

STMT_LIST : STMT_LIST STMT {
    $$ = $1
    append_node($$, $2)
} |
STMT {
    $$ = $1
}
;

STMT : EXP_STMT | IF_STMT | FOR_STMT | WHILE_STMT | VAR_DECL | RETURN_STMT |
COMMENT {
    $$ = $1
    $1.op_type = OpType.COMMENT
}
;

EXP_STMT : EXP ';' | ';'
;

IF_STMT : IF '(' EXP ')' COMPOUND_STMT {    
    $$ = TreeNode()
    $$.op_type = OpType.IF_STMT
    $$.childs[0] = $3
    $$.childs[1] = $5
} | 
IF '(' EXP ')' COMPOUND_STMT ELSE COMPOUND_STMT {

    $$ = TreeNode()
    $$.op_type = OpType.IF_STMT
    $$.childs[0] = $3
    $$.childs[1] = $5
    $$.childs[2] = $7
}
;

FOR_STMT : FOR '(' EXP ';' EXP ';' EXP ')' COMPOUND_STMT {

    $$ = TreeNode()
    $$.op_type = OpType.FOR_STMT
    $$.childs[0] = $3
    $$.childs[1] = $5
    $$.childs[2] = $7
    $$.childs[3] = $9
} | 
FOR '(' VAR_DECL EXP ';' EXP ')' COMPOUND_STMT {
    $$ = TreeNode()
    $$.op_type = OpType.FOR_STMT
    $$.childs[0] = $3
    $$.childs[1] = $4
    $$.childs[2] = $6
    $$.childs[3] = $8
}
;

WHILE_STMT : WHILE '(' EXP ')' COMPOUND_STMT {
    $$ = TreeNode()
    $$.op_type = OpType.WHILE_STMT
    $$.childs[0] = $3
    $$.childs[1] = $5
}
;

RETURN_STMT: RETURN EXP ';' {
    $$ = TreeNode()
    $$.op_type = OpType.RETURN
    $$.childs[0] = $2
};

EXP : SIMPLE_EXP | 
SIMPLE_EXP COMP_OP SIMPLE_EXP {
    $$ = TreeNode()
    $$.op_type = OpType.EXP
    $$.text = $2.text
    $$.childs[0] = $1
    $$.childs[1] = $3
}
;

COMP_OP : EQU | NEQ | LTE | GTE | LT | GT;

SIMPLE_EXP : ASSIGN_EXP |
TERM ADDOP TERM {
    $$ = TreeNode()
    $$.op_type = OpType.EXP
    $$.text = $2.text
    $$.childs[0] = $1
    $$.childs[1] = $3
} |
TERM
;

ASSIGN_EXP : ID '=' EXP {
    $$ = TreeNode()
    $$.op_type = OpType.ASSIGN_EXP
    $$.text = $2.text
    $$.childs[0] = $1
    $$.childs[2] = $3
} |
ID '[' EXP ']' '=' EXP {
    $$ = TreeNode()
    $$.op_type = OpType.ASSIGN_EXP
    $$.text = $2.text
    $$.childs[0] = $1
    $$.childs[1] = $3
    $$.childs[2] = $6
}
;

ADDOP : '+' | '-';

TERM: TERM MULOP FACTOR {
    $$ = TreeNode()
    $$.op_type = OpType.TERM
    $$.text = $2.text
    $$.childs[0] = $1
    $$.childs[1] = $3
}| 
FACTOR;

MULOP : '*' | '/';

FACTOR : 
NUMBER {
    # convert text into integer
    $$ = $1
    $$.value = int($$.text)
    $$.op_type = OpType.NUMBER
} | 
'+' FACTOR {
    $$ = $2
} |
'-' FACTOR {
    $$ = TreeNode()
    $$.op_type = OpType.EXP
    $$.text = '*'
    
    $$.childs[0] = TreeNode()
    $$.childs[0].value = -1
    $$.childs[0].op_type = OpType.NUMBER

    $$.childs[1] = $2
} |
ID {
    $$ = $1
    $$.op_type = OpType.ID
} |
ID '[' EXP ']' {
    $$ = $1
    $$.childs[2] = $3   # index
    $$.op_type = OpType.ID
} |
ID '++' {
    $$ = TreeNode()
    $$.childs[0] = $1
    $$.op_type = OpType.INCREMENT
} |
ID '--' {
    $$ = TreeNode()
    $$.childs[0] = $1
    $$.op_type = OpType.DECREMENT
} |
'(' EXP ')' {
    $$ = $2
} |
CALL {
    $$ = $1
} |
STRING {
    $$ = $1
    $$.op_type = OpType.STRING
}
;

CALL:
ID '(' ')' {
    $$ = $1
    $$.op_type = OpType.FUNC_CALL
} |
ID '(' ARGS_LIST ')' {
    $$ = $1
    $$.childs[2] = $3
    $$.op_type = OpType.FUNC_CALL
};

ARGS_LIST: EXP {
    $$ = $1
} |
ARGS_LIST ',' EXP {
    $$ = $1
    append_node($$, $3)
};

%%

def append_node(first, last):
    # This function appends last node to the end of first node.

    next = first
    while next.next is not None:
        next = next.next
    next.next = last