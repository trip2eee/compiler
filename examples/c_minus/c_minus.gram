# C-- language
%{
import enum

# input: symbol/node -> symbol?
# return: symbol

class SymbolInfo:
    def __init__(self):
        self.name = ''
        self.value = ''
        self.init = False
        self.type = 0

class SymbolTable:
    def __init__(self):
        self.symbols = {}
        self.parent = None
        self.child = None


class OpType(enum.IntEnum):
    TERMINAL = 0
    EXP = 1
    STMT = 2
    IF_STMT = 3
    TERM = 4
    VAR_DECL = 5

class TreeNode:
    def __init__(self):
        self.type = None
        self.text = None
        self.value = None
        self.idx_line = 0
        self.idx_col = 0
        self.symbol_table = SymbolTable()

        self.op_type = OpType.TERMINAL
        self.next = None
        self.childs = [None] * 4
%}

%%

PROGRAM : STMT_SEQ {
    $$ = $1
} | 
COMMENT;

TYPE_SPEC : INT | FLOAT | CHAR | VOID;

VAR_DECL :
TYPE_SPEC ID ';'{    
    
    $$ = TreeNode()
    $$.op_type = OpType.VAR_DECL
    $$.childs[0] = $1
    $$.childs[1] = $2

    $$.symbol_table.symbols[$2.text] = [$1.text, 0]

} | 
TYPE_SPEC ID '=' EXP ';'{   
    $$ = TreeNode()
    $$.op_type = OpType.VAR_DECL
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $4

    $$.symbol_table.symbols[$2.text] = [$1.text, $4.text]
};


STMT_SEQ : STMT_SEQ STMT {
    $$ = $1
    node = $1
    while node.next is not None:
        node = node.next
    $$.next = $2

    merge_symbol_table($2, $$)
} | 
STMT {
    $$ = $1
} |
COMMENT;

STMT : EXP ';' | IF_STMT | FOR_STMT | ';' | VAR_DECL
;

IF_STMT : IF '(' EXP ')' '{' STMT_SEQ '}' {    
    $$ = TreeNode()
    $$.op_type = OpType.IF_STMT
    $$.childs[0] = $3
    $$.childs[1] = $6
} | 
IF '(' EXP ')' '{' STMT_SEQ '}' ELSE '{' STMT_SEQ '}' {

    $$ = TreeNode()
    $$.op_type = OpType.IF_STMT
    $$.childs[0] = $3
    $$.childs[1] = $6
    $$.childs[2] = $10
}
;

FOR_STMT : FOR '(' EXP ';' EXP ';' EXP ')' '{' STMT_SEQ '}' {

    $$ = TreeNode()
    $$.op_type = OpType.FOR_STMT
    $$.childs[0] = $3
    $$.childs[1] = $5
    $$.childs[2] = $7
    $$.childs[3] = $10
};

EXP : SIMPLE_EXP | 
SIMPLE_EXP COMP_OP SIMPLE_EXP {
    $$ = TreeNode()
    $$.op_type = OpType.EXP
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $3
}
;

COMP_OP : EQU | LTE | GTE | LT | GT;

SIMPLE_EXP : ASSIGN_EXP |
TERM ADDOP TERM {
    $$ = TreeNode()
    $$.op_type = OpType.EXP
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $3
} |
TERM
;

ASSIGN_EXP : ID '=' EXP {
    $$ = TreeNode()
    $$.op_type = OpType.EXP
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $3
}
;

ADDOP : '+' | '-';

TERM: TERM MULOP FACTOR {
    $$ = TreeNode()
    $$.op_type = OpType.TERM
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $3
}| 
FACTOR;

MULOP : '*' | '/';

FACTOR : 
NUMBER | 
ID | 
'(' EXP ')' {
    $$ = $2
};

%%

def merge_symbol_table(src, dst):
    # This function merges symbol tables
    for key in src.symbol_table.symbols:
        if key not in dst.symbol_table.symbols:
            dst.symbol_table.symbols[key] = src.symbol_table.symbols[key]

