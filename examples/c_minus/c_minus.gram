# C-- language
%{
import enum

class SymbolType(enum.IntEnum):
    VARIABLE = 0
    ARRAY = 1
    FUNCTION = 2
    TYPE = 3

class SymbolInfo:
    def __init__(self):
        self.value = ''
        self.init = False
        self.type = ''
        self.symtype = SymbolType.VARIABLE

class SymbolTable:
    def __init__(self):
        self.symbols = {}
        self.parent = None

class OpType(enum.IntEnum):
    TERMINAL = 0
    EXP = 1
    STMT = 2
    IF_STMT = 3
    TERM = 4
    VAR_DECL = 5
    FUNC_DECL = 6

class TreeNode:
    def __init__(self):
        self.type = None
        self.text = ''
        self.value = None
        self.idx_line = 0
        self.idx_col = 0
        self.symtab = None  # Symbol Table

        self.op_type = OpType.TERMINAL
        self.next = None
        self.childs = [None] * 4
%}

%%

PROGRAM : DECL_LIST {
    $$ = $1
}
;

DECL_LIST : DECL_LIST DECL {
    $$ = $1
    
    merge_symtab($2, $$)
    append_node($$, $2)
} |
DECL
{
    $$ = $1
}
;

DECL : VAR_DECL | FUNC_DECL | COMMENT
;

VAR_DECL : TYPE_SPEC ID ';'
{
    $$ = TreeNode()
    $$.op_type = OpType.VAR_DECL
    $$.childs[0] = $1
    $$.childs[1] = $2

    $$.symtab = SymbolTable()
    info = SymbolInfo()
    info.type = $1.text
    info.symtype = SymbolType.VARIABLE
    $$.symtab.symbols[$2.text] = info
} |
TYPE_SPEC ID '=' EXP ';'{   
    $$ = TreeNode()
    $$.op_type = OpType.VAR_DECL
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $4

    $$.symtab = SymbolTable()
    info = SymbolInfo()
    info.type = $1.text
    info.symtype = SymbolType.VARIABLE
    info.init = True
    info.value = $4
    $$.symtab.symbols[$2.text] = info
}
;

FUNC_DECL : TYPE_SPEC ID '(' PARAMS ')' COMPOUND_STMT {
    $$ = TreeNode()
    $$.op_type = OpType.FUNC_DECL
    $$.childs[0] = $1.text
    $$.childs[1] = $2.text
    $$.childs[2] = $4
    $$.childs[3] = $6

    # TODO: To add symtab for parameters

    $$.symtab = SymbolTable()
    info = SymbolInfo()
    info.symtype = SymbolType.FUNCTION
    $$.symtab.symbols[$2.text] = info

    $6.symtab.parent = $$.symtab

} |
TYPE_SPEC ID '(' ')' COMPOUND_STMT {
    $$ = TreeNode()
    $$.op_type = OpType.FUNC_DECL
    $$.childs[0] = $1.text
    $$.childs[1] = $2.text
    $$.childs[2] = None
    $$.childs[3] = $5

    $$.symtab = SymbolTable()
    info = SymbolInfo()
    info.symtype = SymbolType.FUNCTION
    $$.symtab.symbols[$2.text] = info

    $5.symtab.parent = $$.symtab
}
;

TYPE_SPEC : INT | FLOAT | CHAR | VOID;

PARAMS : PARAM_LIST | VOID;

PARAM_LIST : PARAM_LIST ',' PARAM {
    $$ = $1
    append_node($$, $3)
} |
PARAM;

PARAM : TYPE_SPEC ID {
    $$ = TreeNode()

    $$.symtab = SymbolTable()
    
    info = SymbolInfo()
    info.name = $2.text
    info.type = $1.text
    info.symtype = SymbolType.VARIABLE

    $$.symtab.symbols[$2.text] = info
};

COMPOUND_STMT : '{' STMT_LIST '}' {
    $$ = $2;
}
;

STMT_LIST : STMT_LIST STMT {
    $$ = $1
    
    append_node($$, $2)
    merge_symtab($2, $$)
} | 
STMT {
    $$ = $1
} |
COMMENT;

STMT : EXP_STMT | IF_STMT | FOR_STMT | VAR_DECL
;

EXP_STMT : EXP ';' | ';'
;

IF_STMT : IF '(' EXP ')' COMPOUND_STMT {    
    $$ = TreeNode()
    $$.op_type = OpType.IF_STMT
    $$.childs[0] = $3
    $$.childs[1] = $5
} | 
IF '(' EXP ')' COMPOUND_STMT ELSE COMPOUND_STMT {

    $$ = TreeNode()
    $$.op_type = OpType.IF_STMT
    $$.childs[0] = $3
    $$.childs[1] = $5
    $$.childs[2] = $7
}
;

FOR_STMT : FOR '(' EXP ';' EXP ';' EXP ')' COMPOUND_STMT {

    $$ = TreeNode()
    $$.op_type = OpType.FOR_STMT
    $$.childs[0] = $3
    $$.childs[1] = $5
    $$.childs[2] = $7
    $$.childs[3] = $9
};

EXP : SIMPLE_EXP | 
SIMPLE_EXP COMP_OP SIMPLE_EXP {
    $$ = TreeNode()
    $$.op_type = OpType.EXP
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $3
}
;

COMP_OP : EQU | LTE | GTE | LT | GT;

SIMPLE_EXP : ASSIGN_EXP |
TERM ADDOP TERM {
    $$ = TreeNode()
    $$.op_type = OpType.EXP
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $3
} |
TERM
;

ASSIGN_EXP : ID '=' EXP {
    $$ = TreeNode()
    $$.op_type = OpType.EXP
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $3
}
;

ADDOP : '+' | '-';

TERM: TERM MULOP FACTOR {
    $$ = TreeNode()
    $$.op_type = OpType.TERM
    $$.childs[0] = $1
    $$.childs[1] = $2
    $$.childs[2] = $3
}| 
FACTOR;

MULOP : '*' | '/';

FACTOR : 
NUMBER | 
ID | 
'(' EXP ')' {
    $$ = $2
};

%%

def merge_symtab(dst, src):
    # This function merges symbol tables
    
    # find the last node of src
    while src.next is not None:
        src = src.next

    if dst.symtab is None:
        dst.symtab = src.symtab
    elif dst.symtab is not None and src.symtab is not None:
        for key in src.symtab.symbols:
            if key not in dst.symtab.symbols:
                dst.symtab.symbols[key] = src.symtab.symbols[key]

def append_node(first, last):
    # This function appends last node to the end of first node.

    next = first
    while next.next is not None:
        next = next.next
    next.next = last