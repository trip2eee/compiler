"""
@fn examples/c_minus/cmm_parser.py
@brief LALR parser table generated by parser_generator.py
@date 2023-09-07 23:57:21
"""
# Definitions

import enum

class OpType(enum.IntEnum):
    TERMINAL = 0
    EXP = 1
    STMT = 2
    IF_STMT = 3
    TERM = 4
    VAR_DECL = 5
    FUNC_DECL = 6

class TreeNode:
    def __init__(self):
        self.type = None
        self.text = ''
        self.value = None
        self.idx_line = 0
        self.idx_col = 0
        self.symtab = None  # Symbol Table

        self.op_type = OpType.TERMINAL
        self.next = None
        self.childs = [None] * 4

        self.visited = False

# Auxiliary Routines

def append_node(first, last):
    # This function appends last node to the end of first node.

    next = first
    while next.next is not None:
        next = next.next
    next.next = last
# Parsing Table
NUM_TERMINALS = 26
NUM_NON_TERMINALS = 23
# Terminals
COMMENT = 0
ID = 1
INT = 6
FLOAT = 7
CHAR = 8
VOID = 9
IF = 13
ELSE = 14
FOR = 15
EQU = 16
LTE = 17
GTE = 18
LT = 19
GT = 20
NUMBER = 25
END__RESERVED = 26
# Non-Terminals
PROGRAM = 27
DECL_LIST = 28
DECL = 29
VAR_DECL = 30
FUNC_DECL = 31
TYPE_SPEC = 32
PARAMS = 33
PARAM_LIST = 34
PARAM = 35
COMPOUND_STMT = 36
STMT_LIST = 37
STMT = 38
EXP_STMT = 39
IF_STMT = 40
FOR_STMT = 41
EXP = 42
COMP_OP = 43
SIMPLE_EXP = 44
ASSIGN_EXP = 45
ADDOP = 46
TERM = 47
MULOP = 48
FACTOR = 49
PROGRAMp = 50
yy_token_names = {
    'COMMENT':0, 'ID':1, ';':2, '=':3, '(':4, ')':5, 'INT':6, 'FLOAT':7, 'CHAR':8, 'VOID':9, 
    ',':10, '{':11, '}':12, 'IF':13, 'ELSE':14, 'FOR':15, 'EQU':16, 'LTE':17, 'GTE':18, 'LT':19, 
    'GT':20, '+':21, '-':22, '*':23, '/':24, 'NUMBER':25, 'END__RESERVED':26, 'PROGRAM':27, 'DECL_LIST':28, 'DECL':29, 
    'VAR_DECL':30, 'FUNC_DECL':31, 'TYPE_SPEC':32, 'PARAMS':33, 'PARAM_LIST':34, 'PARAM':35, 'COMPOUND_STMT':36, 'STMT_LIST':37, 'STMT':38, 'EXP_STMT':39, 
    'IF_STMT':40, 'FOR_STMT':41, 'EXP':42, 'COMP_OP':43, 'SIMPLE_EXP':44, 'ASSIGN_EXP':45, 'ADDOP':46, 'TERM':47, 'MULOP':48, 'FACTOR':49, 
    'PROGRAMp':50
}
# RULE table
NUM_RULES = 53 # ACCEPT in tbl_reduce
tbl_rule = [
    [50,27,],    # 0 : PROGRAM' -> PROGRAM 
    [27,28,],    # 1 : PROGRAM -> DECL_LIST 
    [28,28,29,],    # 2 : DECL_LIST -> DECL_LIST DECL 
    [28,29,],    # 3 : DECL_LIST -> DECL 
    [29,30,],    # 4 : DECL -> VAR_DECL 
    [29,31,],    # 5 : DECL -> FUNC_DECL 
    [29,0,],    # 6 : DECL -> COMMENT 
    [30,32,1,2,],    # 7 : VAR_DECL -> TYPE_SPEC ID ; 
    [30,32,1,3,42,2,],    # 8 : VAR_DECL -> TYPE_SPEC ID = EXP ; 
    [31,32,1,4,33,5,36,],    # 9 : FUNC_DECL -> TYPE_SPEC ID ( PARAMS ) COMPOUND_STMT 
    [31,32,1,4,5,36,],    # 10 : FUNC_DECL -> TYPE_SPEC ID ( ) COMPOUND_STMT 
    [32,6,],    # 11 : TYPE_SPEC -> INT 
    [32,7,],    # 12 : TYPE_SPEC -> FLOAT 
    [32,8,],    # 13 : TYPE_SPEC -> CHAR 
    [32,9,],    # 14 : TYPE_SPEC -> VOID 
    [33,34,],    # 15 : PARAMS -> PARAM_LIST 
    [33,9,],    # 16 : PARAMS -> VOID 
    [34,34,10,35,],    # 17 : PARAM_LIST -> PARAM_LIST , PARAM 
    [34,35,],    # 18 : PARAM_LIST -> PARAM 
    [35,32,1,],    # 19 : PARAM -> TYPE_SPEC ID 
    [36,11,37,12,],    # 20 : COMPOUND_STMT -> { STMT_LIST } 
    [37,37,38,],    # 21 : STMT_LIST -> STMT_LIST STMT 
    [37,38,],    # 22 : STMT_LIST -> STMT 
    [37,0,],    # 23 : STMT_LIST -> COMMENT 
    [38,39,],    # 24 : STMT -> EXP_STMT 
    [38,40,],    # 25 : STMT -> IF_STMT 
    [38,41,],    # 26 : STMT -> FOR_STMT 
    [38,30,],    # 27 : STMT -> VAR_DECL 
    [39,42,2,],    # 28 : EXP_STMT -> EXP ; 
    [39,2,],    # 29 : EXP_STMT -> ; 
    [40,13,4,42,5,36,],    # 30 : IF_STMT -> IF ( EXP ) COMPOUND_STMT 
    [40,13,4,42,5,36,14,36,],    # 31 : IF_STMT -> IF ( EXP ) COMPOUND_STMT ELSE COMPOUND_STMT 
    [41,15,4,42,2,42,2,42,5,36,],    # 32 : FOR_STMT -> FOR ( EXP ; EXP ; EXP ) COMPOUND_STMT 
    [42,44,],    # 33 : EXP -> SIMPLE_EXP 
    [42,44,43,44,],    # 34 : EXP -> SIMPLE_EXP COMP_OP SIMPLE_EXP 
    [43,16,],    # 35 : COMP_OP -> EQU 
    [43,17,],    # 36 : COMP_OP -> LTE 
    [43,18,],    # 37 : COMP_OP -> GTE 
    [43,19,],    # 38 : COMP_OP -> LT 
    [43,20,],    # 39 : COMP_OP -> GT 
    [44,45,],    # 40 : SIMPLE_EXP -> ASSIGN_EXP 
    [44,47,46,47,],    # 41 : SIMPLE_EXP -> TERM ADDOP TERM 
    [44,47,],    # 42 : SIMPLE_EXP -> TERM 
    [45,1,3,42,],    # 43 : ASSIGN_EXP -> ID = EXP 
    [46,21,],    # 44 : ADDOP -> + 
    [46,22,],    # 45 : ADDOP -> - 
    [47,47,48,49,],    # 46 : TERM -> TERM MULOP FACTOR 
    [47,49,],    # 47 : TERM -> FACTOR 
    [48,23,],    # 48 : MULOP -> * 
    [48,24,],    # 49 : MULOP -> / 
    [49,25,],    # 50 : FACTOR -> NUMBER 
    [49,1,],    # 51 : FACTOR -> ID 
    [49,4,42,5,],    # 52 : FACTOR -> ( EXP ) 
]
# SHIFT / GOTO table
# COMMENT ID ; = ( ) INT FLOAT CHAR VOID , { } IF ELSE FOR EQU LTE GTE LT GT + - * / NUMBER $ PROGRAM DECL_LIST DECL VAR_DECL FUNC_DECL TYPE_SPEC PARAMS PARAM_LIST PARAM COMPOUND_STMT STMT_LIST STMT EXP_STMT IF_STMT FOR_STMT EXP COMP_OP SIMPLE_EXP ASSIGN_EXP ADDOP TERM MULOP FACTOR 
tbl_shift = [
    [6, -1, -1, -1, -1, -1, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [6, -1, -1, -1, -1, -1, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 4, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, 14, 15, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 21, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, 18, 19, -1, 20, -1, 22, ],
    [-1, -1, -1, -1, -1, 26, 8, 9, 10, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 25, 27, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 34, 35, 36, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, 42, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, 39, -1, ],
    [-1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 21, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, 18, 19, -1, 20, -1, 22, ],
    [-1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 21, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, 19, -1, 20, -1, 22, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 53, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, 22, ],
    [-1, 53, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 21, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, 18, 19, -1, 20, -1, 22, ],
    [-1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [60, 21, 66, -1, 24, -1, 8, 9, 10, 11, -1, -1, -1, 67, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, 64, -1, 69, -1, -1, -1, -1, 58, 59, 61, 62, 63, 65, -1, 18, 19, -1, 20, -1, 22, ],
    [-1, -1, -1, -1, -1, -1, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 21, 66, -1, 24, -1, 8, 9, 10, 11, -1, -1, 71, 67, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, 64, -1, 69, -1, -1, -1, -1, -1, 72, 61, 62, 63, 65, -1, 18, 19, -1, 20, -1, 22, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 21, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, 18, 19, -1, 20, -1, 22, ],
    [-1, 21, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, 18, 19, -1, 20, -1, 22, ],
    [-1, -1, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 21, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, 18, 19, -1, 20, -1, 22, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 21, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86, -1, 18, 19, -1, 20, -1, 22, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
]
# REDUCE / ACCEPT table
tbl_reduce = [
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, ],
    [3, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, ],
    [4, -1, -1, -1, -1, -1, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, ],
    [5, -1, -1, -1, -1, -1, 5, 5, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, ],
    [6, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [11, 11, 11, -1, 11, -1, 11, 11, 11, 11, 11, -1, -1, 11, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, ],
    [12, 12, 12, -1, 12, -1, 12, 12, 12, 12, 12, -1, -1, 12, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, ],
    [13, 13, 13, -1, 13, -1, 13, 13, 13, 13, 13, -1, -1, 13, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, ],
    [14, 14, 14, -1, 14, -1, 14, 14, 14, 14, 14, -1, -1, 14, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, ],
    [2, -1, -1, -1, -1, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [7, 7, 7, -1, 7, -1, 7, 7, 7, 7, -1, -1, 7, 7, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [33, 33, 33, -1, 33, 33, 33, 33, 33, 33, -1, -1, -1, 33, -1, 33, -1, -1, -1, -1, -1, 33, 33, 33, 33, 33, 33, ],
    [40, 40, 40, -1, 40, 40, 40, 40, 40, 40, -1, -1, -1, 40, -1, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, ],
    [42, 42, 42, -1, 42, 42, 42, 42, 42, 42, -1, -1, -1, 42, -1, 42, 42, 42, 42, 42, 42, -1, -1, -1, -1, 42, 42, ],
    [51, 51, 51, -1, 51, 51, 51, 51, 51, 51, -1, -1, -1, 51, -1, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, ],
    [47, 47, 47, -1, 47, 47, 47, 47, 47, 47, -1, -1, -1, 47, -1, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, ],
    [50, 50, 50, -1, 50, 50, 50, 50, 50, 50, -1, -1, -1, 50, -1, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [15, -1, -1, -1, -1, 15, 15, 15, 15, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, ],
    [14, 14, -1, -1, -1, 16, 14, 14, 14, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, ],
    [18, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [8, 8, 8, -1, 8, -1, 8, 8, 8, 8, -1, -1, 8, 8, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 8, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [35, 35, 35, -1, 35, -1, 35, 35, 35, 35, -1, -1, -1, 35, -1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, -1, ],
    [36, 36, 36, -1, 36, -1, 36, 36, 36, 36, -1, -1, -1, 36, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, ],
    [37, 37, 37, -1, 37, -1, 37, 37, 37, 37, -1, -1, -1, 37, -1, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, -1, ],
    [38, 38, 38, -1, 38, -1, 38, 38, 38, 38, -1, -1, -1, 38, -1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, -1, ],
    [39, 39, 39, -1, 39, -1, 39, 39, 39, 39, -1, -1, -1, 39, -1, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [44, 44, 44, -1, 44, -1, 44, 44, 44, 44, -1, -1, -1, 44, -1, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, -1, ],
    [45, 45, 45, -1, 45, -1, 45, 45, 45, 45, -1, -1, -1, 45, -1, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, -1, ],
    [48, 48, 48, -1, 48, -1, 48, 48, 48, 48, -1, -1, -1, 48, -1, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, -1, ],
    [49, 49, 49, -1, 49, -1, 49, 49, 49, 49, -1, -1, -1, 49, -1, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [10, -1, -1, -1, -1, -1, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [19, -1, -1, -1, -1, 19, 19, 19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, ],
    [34, 34, 34, -1, 34, 34, 34, 34, 34, 34, -1, -1, -1, 34, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, ],
    [41, 41, 41, -1, 41, 41, 41, 41, 41, 41, -1, -1, -1, 41, -1, 41, 41, 41, 41, 41, 41, 41, 41, -1, -1, 41, 41, ],
    [51, 51, 51, -1, 51, 51, 51, 51, 51, 51, -1, -1, -1, 51, -1, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, ],
    [46, 46, 46, -1, 46, 46, 46, 46, 46, 46, -1, -1, -1, 46, -1, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, ],
    [43, 43, 43, -1, 43, 43, 43, 43, 43, 43, -1, -1, -1, 43, -1, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, ],
    [52, 52, 52, -1, 52, 52, 52, 52, 52, 52, -1, -1, -1, 52, -1, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, ],
    [9, -1, -1, -1, -1, -1, 9, 9, 9, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [22, 22, 22, -1, 22, -1, 22, 22, 22, 22, -1, -1, 22, 22, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 22, ],
    [23, 23, 23, -1, 23, -1, 23, 23, 23, 23, -1, -1, 23, 23, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, ],
    [24, 24, 24, -1, 24, -1, 24, 24, 24, 24, -1, -1, 24, 24, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 24, ],
    [25, 25, 25, -1, 25, -1, 25, 25, 25, 25, -1, -1, 25, 25, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 25, ],
    [26, 26, 26, -1, 26, -1, 26, 26, 26, 26, -1, -1, 26, 26, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 26, ],
    [27, 27, 27, -1, 27, -1, 27, 27, 27, 27, -1, -1, 27, 27, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 27, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [29, 29, 29, -1, 29, -1, 29, 29, 29, 29, -1, -1, 29, 29, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 29, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [17, -1, -1, -1, -1, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, ],
    [20, 20, 20, -1, 20, -1, 20, 20, 20, 20, -1, -1, 20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, ],
    [21, 21, 21, -1, 21, -1, 21, 21, 21, 21, -1, -1, 21, 21, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, ],
    [28, 28, 28, -1, 28, -1, 28, 28, 28, 28, -1, -1, 28, 28, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, 28, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [30, 30, 30, -1, 30, -1, 30, 30, 30, 30, -1, -1, 30, 30, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 30, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [31, 31, 31, -1, 31, -1, 31, 31, 31, 31, -1, -1, 31, 31, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 31, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [32, 32, 32, -1, 32, -1, 32, 32, 32, 32, -1, -1, 32, 32, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 32, ],
]
# Reduce Actions
def reduce_rule_1(p1):
    # PROGRAM -> DECL_LIST 
    result = p1

    result.type = PROGRAM
    return result

def reduce_rule_2(p1, p2):
    # DECL_LIST -> DECL_LIST DECL 
    result = p1
    
    append_node(result, p2)

    result.type = DECL_LIST
    return result

def reduce_rule_3(p1):
    # DECL_LIST -> DECL 
    result = p1

    result.type = DECL_LIST
    return result

def reduce_rule_4(p1):
    # DECL -> VAR_DECL 
    result = p1
    result.type = DECL
    return result

def reduce_rule_5(p1):
    # DECL -> FUNC_DECL 
    result = p1
    result.type = DECL
    return result

def reduce_rule_6(p1):
    # DECL -> COMMENT 
    result = p1
    result.type = DECL
    return result

def reduce_rule_7(p1, p2, p3):
    # VAR_DECL -> TYPE_SPEC ID ; 
    result = TreeNode()
    result.op_type = OpType.VAR_DECL
    result.childs[0] = p1
    result.childs[1] = p2

    result.type = VAR_DECL
    return result

def reduce_rule_8(p1, p2, p3, p4, p5):
    # VAR_DECL -> TYPE_SPEC ID = EXP ; 
   
    result = TreeNode()
    result.op_type = OpType.VAR_DECL
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[2] = p4

    result.type = VAR_DECL
    return result

def reduce_rule_9(p1, p2, p3, p4, p5, p6):
    # FUNC_DECL -> TYPE_SPEC ID ( PARAMS ) COMPOUND_STMT 
    result = TreeNode()
    result.op_type = OpType.FUNC_DECL
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[2] = p4
    result.childs[3] = p6


    result.type = FUNC_DECL
    return result

def reduce_rule_10(p1, p2, p3, p4, p5):
    # FUNC_DECL -> TYPE_SPEC ID ( ) COMPOUND_STMT 
    result = TreeNode()
    result.op_type = OpType.FUNC_DECL
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[2] = None
    result.childs[3] = p5

    result.type = FUNC_DECL
    return result

def reduce_rule_11(p1):
    # TYPE_SPEC -> INT 
    result = p1
    result.type = TYPE_SPEC
    return result

def reduce_rule_12(p1):
    # TYPE_SPEC -> FLOAT 
    result = p1
    result.type = TYPE_SPEC
    return result

def reduce_rule_13(p1):
    # TYPE_SPEC -> CHAR 
    result = p1
    result.type = TYPE_SPEC
    return result

def reduce_rule_14(p1):
    # TYPE_SPEC -> VOID 
    result = p1
    result.type = TYPE_SPEC
    return result

def reduce_rule_15(p1):
    # PARAMS -> PARAM_LIST 
    result = p1
    result.type = PARAMS
    return result

def reduce_rule_16(p1):
    # PARAMS -> VOID 
    result = p1
    result.type = PARAMS
    return result

def reduce_rule_17(p1, p2, p3):
    # PARAM_LIST -> PARAM_LIST , PARAM 
    result = p1
    append_node(result, p3)

    result.type = PARAM_LIST
    return result

def reduce_rule_18(p1):
    # PARAM_LIST -> PARAM 
    result = p1
    result.type = PARAM_LIST
    return result

def reduce_rule_19(p1, p2):
    # PARAM -> TYPE_SPEC ID 
    result = TreeNode()

    result.type = PARAM
    return result

def reduce_rule_20(p1, p2, p3):
    # COMPOUND_STMT -> { STMT_LIST } 
    result = p2;

    result.type = COMPOUND_STMT
    return result

def reduce_rule_21(p1, p2):
    # STMT_LIST -> STMT_LIST STMT 
    result = p1
    
    append_node(result, p2)

    result.type = STMT_LIST
    return result

def reduce_rule_22(p1):
    # STMT_LIST -> STMT 
    result = p1

    result.type = STMT_LIST
    return result

def reduce_rule_23(p1):
    # STMT_LIST -> COMMENT 
    result = p1
    result.type = STMT_LIST
    return result

def reduce_rule_24(p1):
    # STMT -> EXP_STMT 
    result = p1
    result.type = STMT
    return result

def reduce_rule_25(p1):
    # STMT -> IF_STMT 
    result = p1
    result.type = STMT
    return result

def reduce_rule_26(p1):
    # STMT -> FOR_STMT 
    result = p1
    result.type = STMT
    return result

def reduce_rule_27(p1):
    # STMT -> VAR_DECL 
    result = p1
    result.type = STMT
    return result

def reduce_rule_28(p1, p2):
    # EXP_STMT -> EXP ; 
    result = p1
    result.type = EXP_STMT
    return result

def reduce_rule_29(p1):
    # EXP_STMT -> ; 
    result = p1
    result.type = EXP_STMT
    return result

def reduce_rule_30(p1, p2, p3, p4, p5):
    # IF_STMT -> IF ( EXP ) COMPOUND_STMT 
    
    result = TreeNode()
    result.op_type = OpType.IF_STMT
    result.childs[0] = p3
    result.childs[1] = p5

    result.type = IF_STMT
    return result

def reduce_rule_31(p1, p2, p3, p4, p5, p6, p7):
    # IF_STMT -> IF ( EXP ) COMPOUND_STMT ELSE COMPOUND_STMT 
    result = TreeNode()
    result.op_type = OpType.IF_STMT
    result.childs[0] = p3
    result.childs[1] = p5
    result.childs[2] = p7

    result.type = IF_STMT
    return result

def reduce_rule_32(p1, p2, p3, p4, p5, p6, p7, p8, p9):
    # FOR_STMT -> FOR ( EXP ; EXP ; EXP ) COMPOUND_STMT 
    result = TreeNode()
    result.op_type = OpType.FOR_STMT
    result.childs[0] = p3
    result.childs[1] = p5
    result.childs[2] = p7
    result.childs[3] = p9

    result.type = FOR_STMT
    return result

def reduce_rule_33(p1):
    # EXP -> SIMPLE_EXP 
    result = p1
    result.type = EXP
    return result

def reduce_rule_34(p1, p2, p3):
    # EXP -> SIMPLE_EXP COMP_OP SIMPLE_EXP 
    result = TreeNode()
    result.op_type = OpType.EXP
    result.text = p2.text
    result.childs[0] = p1
    result.childs[1] = p3

    result.type = EXP
    return result

def reduce_rule_35(p1):
    # COMP_OP -> EQU 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_36(p1):
    # COMP_OP -> LTE 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_37(p1):
    # COMP_OP -> GTE 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_38(p1):
    # COMP_OP -> LT 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_39(p1):
    # COMP_OP -> GT 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_40(p1):
    # SIMPLE_EXP -> ASSIGN_EXP 
    result = p1
    result.type = SIMPLE_EXP
    return result

def reduce_rule_41(p1, p2, p3):
    # SIMPLE_EXP -> TERM ADDOP TERM 
    result = TreeNode()
    result.op_type = OpType.EXP
    result.text = p2.text
    result.childs[0] = p1
    result.childs[1] = p3

    result.type = SIMPLE_EXP
    return result

def reduce_rule_42(p1):
    # SIMPLE_EXP -> TERM 
    result = p1
    result.type = SIMPLE_EXP
    return result

def reduce_rule_43(p1, p2, p3):
    # ASSIGN_EXP -> ID = EXP 
    result = TreeNode()
    result.op_type = OpType.EXP
    result.text = p2.text
    result.childs[0] = p1
    result.childs[1] = p3

    result.type = ASSIGN_EXP
    return result

def reduce_rule_44(p1):
    # ADDOP -> + 
    result = p1
    result.type = ADDOP
    return result

def reduce_rule_45(p1):
    # ADDOP -> - 
    result = p1
    result.type = ADDOP
    return result

def reduce_rule_46(p1, p2, p3):
    # TERM -> TERM MULOP FACTOR 
    result = TreeNode()
    result.op_type = OpType.TERM
    result.text = p2.text
    result.childs[0] = p1
    result.childs[1] = p3

    result.type = TERM
    return result

def reduce_rule_47(p1):
    # TERM -> FACTOR 
    result = p1
    result.type = TERM
    return result

def reduce_rule_48(p1):
    # MULOP -> * 
    result = p1
    result.type = MULOP
    return result

def reduce_rule_49(p1):
    # MULOP -> / 
    result = p1
    result.type = MULOP
    return result

def reduce_rule_50(p1):
    # FACTOR -> NUMBER 
    # convert text into integer
    result = p1
    result.value = int(result.text)

    result.type = FACTOR
    return result

def reduce_rule_51(p1):
    # FACTOR -> ID 
    result = p1
    result.type = FACTOR
    return result

def reduce_rule_52(p1, p2, p3):
    # FACTOR -> ( EXP ) 
    result = p2

    result.type = FACTOR
    return result

# Embedded Actions
