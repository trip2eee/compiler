"""
@fn examples/c_minus/cmm_parser.py
@brief LALR parser table generated by parser_generator.py
@date 2023-09-17 17:52:41
"""
# Definitions

# TODO: To implement array, struct/class

import enum

class OpType(enum.IntEnum):
    TERMINAL = 0
    NUMBER = 1
    ID = 2
    EXP = 3
    ASSIGN_EXP = 4
    STMT = 5
    IF_STMT = 6
    FOR_STMT = 7
    WHILE_STMT = 8
    TERM = 9
    VAR_DECL = 10
    FUNC_DECL = 11
    RETURN = 12
    FUNC_CALL = 13
    STRING = 14
    COMMENT = 15
    INCREMENT = 16
    DECREMENT = 17
    VAR_ARRAY_DECL = 18

class TreeNode:
    def __init__(self):
        self.type = None    # reduced symbol type
        self.text = ''
        self.value = None
        self.idx_line = 0
        self.idx_col = 0
        self.symtab = None  # Symbol Table

        self.op_type = OpType.TERMINAL
        self.next = None
        self.childs = [None] * 4

        self.visited = False

# Auxiliary Routines

def append_node(first, last):
    # This function appends last node to the end of first node.

    next = first
    while next.next is not None:
        next = next.next
    next.next = last
# Parsing Table
NUM_TERMINALS = 34
NUM_NON_TERMINALS = 27
# Terminals
COMMENT = 0
ID = 1
NUMBER = 5
INT = 9
FLOAT = 10
CHAR = 11
VOID = 12
IF = 16
ELSE = 17
FOR = 18
WHILE = 19
RETURN = 20
EQU = 21
NEQ = 22
LTE = 23
GTE = 24
LT = 25
GT = 26
STRING = 33
END__RESERVED = 34
# Non-Terminals
PROGRAM = 35
DECL_LIST = 36
DECL = 37
VAR_DECL = 38
FUNC_DECL = 39
TYPE_SPEC = 40
PARAMS = 41
PARAM_LIST = 42
PARAM = 43
COMPOUND_STMT = 44
STMT_LIST = 45
STMT = 46
EXP_STMT = 47
IF_STMT = 48
FOR_STMT = 49
WHILE_STMT = 50
RETURN_STMT = 51
EXP = 52
COMP_OP = 53
SIMPLE_EXP = 54
ASSIGN_EXP = 55
ADDOP = 56
TERM = 57
MULOP = 58
FACTOR = 59
CALL = 60
ARGS_LIST = 61
PROGRAMp = 62
yy_token_names = {
    'COMMENT':0, 'ID':1, ';':2, '=':3, '[':4, 'NUMBER':5, ']':6, '(':7, ')':8, 'INT':9, 
    'FLOAT':10, 'CHAR':11, 'VOID':12, ',':13, '{':14, '}':15, 'IF':16, 'ELSE':17, 'FOR':18, 'WHILE':19, 
    'RETURN':20, 'EQU':21, 'NEQ':22, 'LTE':23, 'GTE':24, 'LT':25, 'GT':26, '+':27, '-':28, '*':29, 
    '/':30, '++':31, '--':32, 'STRING':33, 'END__RESERVED':34, 'PROGRAM':35, 'DECL_LIST':36, 'DECL':37, 'VAR_DECL':38, 'FUNC_DECL':39, 
    'TYPE_SPEC':40, 'PARAMS':41, 'PARAM_LIST':42, 'PARAM':43, 'COMPOUND_STMT':44, 'STMT_LIST':45, 'STMT':46, 'EXP_STMT':47, 'IF_STMT':48, 'FOR_STMT':49, 
    'WHILE_STMT':50, 'RETURN_STMT':51, 'EXP':52, 'COMP_OP':53, 'SIMPLE_EXP':54, 'ASSIGN_EXP':55, 'ADDOP':56, 'TERM':57, 'MULOP':58, 'FACTOR':59, 
    'CALL':60, 'ARGS_LIST':61, 'PROGRAMp':62
}
# RULE table
NUM_RULES = 73 # ACCEPT in tbl_reduce
tbl_rule = [
    [62,35,],    # 0 : PROGRAM' -> PROGRAM 
    [35,36,],    # 1 : PROGRAM -> DECL_LIST 
    [36,36,37,],    # 2 : DECL_LIST -> DECL_LIST DECL 
    [36,37,],    # 3 : DECL_LIST -> DECL 
    [37,38,],    # 4 : DECL -> VAR_DECL 
    [37,39,],    # 5 : DECL -> FUNC_DECL 
    [37,0,],    # 6 : DECL -> COMMENT 
    [38,40,1,2,],    # 7 : VAR_DECL -> TYPE_SPEC ID ; 
    [38,40,1,3,52,2,],    # 8 : VAR_DECL -> TYPE_SPEC ID = EXP ; 
    [38,40,1,4,5,6,2,],    # 9 : VAR_DECL -> TYPE_SPEC ID [ NUMBER ] ; 
    [39,40,1,7,41,8,44,],    # 10 : FUNC_DECL -> TYPE_SPEC ID ( PARAMS ) COMPOUND_STMT 
    [39,40,1,7,8,44,],    # 11 : FUNC_DECL -> TYPE_SPEC ID ( ) COMPOUND_STMT 
    [40,9,],    # 12 : TYPE_SPEC -> INT 
    [40,10,],    # 13 : TYPE_SPEC -> FLOAT 
    [40,11,],    # 14 : TYPE_SPEC -> CHAR 
    [40,12,],    # 15 : TYPE_SPEC -> VOID 
    [41,42,],    # 16 : PARAMS -> PARAM_LIST 
    [41,12,],    # 17 : PARAMS -> VOID 
    [42,42,13,43,],    # 18 : PARAM_LIST -> PARAM_LIST , PARAM 
    [42,43,],    # 19 : PARAM_LIST -> PARAM 
    [43,40,1,],    # 20 : PARAM -> TYPE_SPEC ID 
    [43,40,1,4,5,6,],    # 21 : PARAM -> TYPE_SPEC ID [ NUMBER ] 
    [44,14,45,15,],    # 22 : COMPOUND_STMT -> { STMT_LIST } 
    [45,45,46,],    # 23 : STMT_LIST -> STMT_LIST STMT 
    [45,46,],    # 24 : STMT_LIST -> STMT 
    [46,47,],    # 25 : STMT -> EXP_STMT 
    [46,48,],    # 26 : STMT -> IF_STMT 
    [46,49,],    # 27 : STMT -> FOR_STMT 
    [46,50,],    # 28 : STMT -> WHILE_STMT 
    [46,38,],    # 29 : STMT -> VAR_DECL 
    [46,51,],    # 30 : STMT -> RETURN_STMT 
    [46,0,],    # 31 : STMT -> COMMENT 
    [47,52,2,],    # 32 : EXP_STMT -> EXP ; 
    [47,2,],    # 33 : EXP_STMT -> ; 
    [48,16,7,52,8,44,],    # 34 : IF_STMT -> IF ( EXP ) COMPOUND_STMT 
    [48,16,7,52,8,44,17,44,],    # 35 : IF_STMT -> IF ( EXP ) COMPOUND_STMT ELSE COMPOUND_STMT 
    [49,18,7,52,2,52,2,52,8,44,],    # 36 : FOR_STMT -> FOR ( EXP ; EXP ; EXP ) COMPOUND_STMT 
    [49,18,7,38,52,2,52,8,44,],    # 37 : FOR_STMT -> FOR ( VAR_DECL EXP ; EXP ) COMPOUND_STMT 
    [50,19,7,52,8,44,],    # 38 : WHILE_STMT -> WHILE ( EXP ) COMPOUND_STMT 
    [51,20,52,2,],    # 39 : RETURN_STMT -> RETURN EXP ; 
    [52,54,],    # 40 : EXP -> SIMPLE_EXP 
    [52,54,53,54,],    # 41 : EXP -> SIMPLE_EXP COMP_OP SIMPLE_EXP 
    [53,21,],    # 42 : COMP_OP -> EQU 
    [53,22,],    # 43 : COMP_OP -> NEQ 
    [53,23,],    # 44 : COMP_OP -> LTE 
    [53,24,],    # 45 : COMP_OP -> GTE 
    [53,25,],    # 46 : COMP_OP -> LT 
    [53,26,],    # 47 : COMP_OP -> GT 
    [54,55,],    # 48 : SIMPLE_EXP -> ASSIGN_EXP 
    [54,57,56,57,],    # 49 : SIMPLE_EXP -> TERM ADDOP TERM 
    [54,57,],    # 50 : SIMPLE_EXP -> TERM 
    [55,1,3,52,],    # 51 : ASSIGN_EXP -> ID = EXP 
    [55,1,4,52,6,3,52,],    # 52 : ASSIGN_EXP -> ID [ EXP ] = EXP 
    [56,27,],    # 53 : ADDOP -> + 
    [56,28,],    # 54 : ADDOP -> - 
    [57,57,58,59,],    # 55 : TERM -> TERM MULOP FACTOR 
    [57,59,],    # 56 : TERM -> FACTOR 
    [58,29,],    # 57 : MULOP -> * 
    [58,30,],    # 58 : MULOP -> / 
    [59,5,],    # 59 : FACTOR -> NUMBER 
    [59,27,59,],    # 60 : FACTOR -> + FACTOR 
    [59,28,59,],    # 61 : FACTOR -> - FACTOR 
    [59,1,],    # 62 : FACTOR -> ID 
    [59,1,4,52,6,],    # 63 : FACTOR -> ID [ EXP ] 
    [59,1,31,],    # 64 : FACTOR -> ID ++ 
    [59,1,32,],    # 65 : FACTOR -> ID -- 
    [59,7,52,8,],    # 66 : FACTOR -> ( EXP ) 
    [59,60,],    # 67 : FACTOR -> CALL 
    [59,33,],    # 68 : FACTOR -> STRING 
    [60,1,7,8,],    # 69 : CALL -> ID ( ) 
    [60,1,7,61,8,],    # 70 : CALL -> ID ( ARGS_LIST ) 
    [61,52,],    # 71 : ARGS_LIST -> EXP 
    [61,61,13,52,],    # 72 : ARGS_LIST -> ARGS_LIST , EXP 
]
# SHIFT / GOTO table
# COMMENT ID ; = [ NUMBER ] ( ) INT FLOAT CHAR VOID , { } IF ELSE FOR WHILE RETURN EQU NEQ LTE GTE LT GT + - * / ++ -- STRING $ PROGRAM DECL_LIST DECL VAR_DECL FUNC_DECL TYPE_SPEC PARAMS PARAM_LIST PARAM COMPOUND_STMT STMT_LIST STMT EXP_STMT IF_STMT FOR_STMT WHILE_STMT RETURN_STMT EXP COMP_OP SIMPLE_EXP ASSIGN_EXP ADDOP TERM MULOP FACTOR CALL ARGS_LIST 
tbl_shift = [
    [6, -1, -1, -1, -1, -1, -1, -1, -1, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [6, -1, -1, -1, -1, -1, -1, -1, -1, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 4, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, 14, 15, 16, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, 32, 8, 9, 10, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, 31, 33, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, 40, 41, 42, 43, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 48, 49, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, 46, -1, -1, -1, ],
    [-1, -1, -1, 51, 52, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 57, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 28, -1, ],
    [-1, 57, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 28, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 57, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, 23, 28, -1, ],
    [-1, 57, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, 19, 20, -1, 21, -1, 23, 28, 72, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, 74, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [86, 22, 88, -1, -1, 24, -1, 27, -1, 8, 9, 10, 11, -1, -1, -1, 89, -1, 90, 91, 93, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, 84, -1, 92, -1, -1, -1, -1, 78, 79, 80, 81, 82, 83, 85, 87, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, 95, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, 96, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, 97, -1, -1, -1, -1, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [86, 22, 88, -1, -1, 24, -1, 27, -1, 8, 9, 10, 11, -1, -1, 100, 89, -1, 90, 91, 93, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, 84, -1, 92, -1, -1, -1, -1, -1, 101, 80, 81, 82, 83, 85, 87, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, 102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, 103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, 104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 106, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 107, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 109, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, 111, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 112, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, 8, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, 114, -1, 92, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 113, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, 14, 15, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, 116, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, 117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 118, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, 119, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, 120, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 121, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, 125, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, 128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, -1, -1, -1, 24, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 131, -1, 19, 20, -1, 21, -1, 23, 28, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, 132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, 133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
]
# REDUCE / ACCEPT table
tbl_reduce = [
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, ],
    [3, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, ],
    [4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, ],
    [5, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, ],
    [6, -1, -1, -1, -1, -1, -1, -1, -1, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [12, 12, 12, -1, -1, 12, -1, 12, -1, 12, 12, 12, 12, 12, -1, -1, 12, -1, 12, 12, 12, -1, -1, -1, -1, -1, -1, 12, 12, -1, -1, -1, -1, 12, -1, ],
    [13, 13, 13, -1, -1, 13, -1, 13, -1, 13, 13, 13, 13, 13, -1, -1, 13, -1, 13, 13, 13, -1, -1, -1, -1, -1, -1, 13, 13, -1, -1, -1, -1, 13, -1, ],
    [14, 14, 14, -1, -1, 14, -1, 14, -1, 14, 14, 14, 14, 14, -1, -1, 14, -1, 14, 14, 14, -1, -1, -1, -1, -1, -1, 14, 14, -1, -1, -1, -1, 14, -1, ],
    [15, 15, 15, -1, -1, 15, -1, 15, -1, 15, 15, 15, 15, 15, -1, -1, 15, -1, 15, 15, 15, -1, -1, -1, -1, -1, -1, 15, 15, -1, -1, -1, -1, 15, -1, ],
    [2, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [7, 7, 7, -1, -1, 7, -1, 7, -1, 7, 7, 7, 7, -1, -1, 7, 7, -1, 7, 7, 7, -1, -1, -1, -1, -1, -1, 7, 7, -1, -1, -1, -1, 7, 7, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [40, 40, 40, -1, -1, 40, 40, 40, 40, 40, 40, 40, 40, 40, -1, -1, 40, -1, 40, 40, 40, -1, -1, -1, -1, -1, -1, 40, 40, 40, 40, -1, -1, 40, 40, ],
    [48, 48, 48, -1, -1, 48, 48, 48, 48, 48, 48, 48, 48, 48, -1, -1, 48, -1, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, -1, -1, 48, 48, ],
    [50, 50, 50, -1, -1, 50, 50, 50, 50, 50, 50, 50, 50, 50, -1, -1, 50, -1, 50, 50, 50, 50, 50, 50, 50, 50, 50, -1, -1, -1, -1, -1, -1, 50, 50, ],
    [62, 62, 62, -1, -1, 62, 62, -1, 62, 62, 62, 62, 62, 62, -1, -1, 62, -1, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, -1, -1, 62, 62, ],
    [56, 56, 56, -1, -1, 56, 56, 56, 56, 56, 56, 56, 56, 56, -1, -1, 56, -1, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, -1, -1, 56, 56, ],
    [59, 59, 59, -1, -1, 59, 59, 59, 59, 59, 59, 59, 59, 59, -1, -1, 59, -1, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, -1, -1, 59, 59, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [67, 67, 67, -1, -1, 67, 67, 67, 67, 67, 67, 67, 67, 67, -1, -1, 67, -1, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, -1, -1, 67, 67, ],
    [68, 68, 68, -1, -1, 68, 68, 68, 68, 68, 68, 68, 68, 68, -1, -1, 68, -1, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, -1, -1, 68, 68, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, ],
    [15, 15, -1, -1, -1, -1, -1, -1, 17, 15, 15, 15, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, ],
    [19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [8, 8, 8, -1, -1, 8, -1, 8, -1, 8, 8, 8, 8, -1, -1, 8, 8, -1, 8, 8, 8, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, -1, 8, 8, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [42, 42, 42, -1, -1, 42, -1, 42, -1, 42, 42, 42, 42, 42, -1, -1, 42, -1, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, -1, -1, 42, -1, ],
    [43, 43, 43, -1, -1, 43, -1, 43, -1, 43, 43, 43, 43, 43, -1, -1, 43, -1, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, -1, -1, 43, -1, ],
    [44, 44, 44, -1, -1, 44, -1, 44, -1, 44, 44, 44, 44, 44, -1, -1, 44, -1, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, -1, -1, 44, -1, ],
    [45, 45, 45, -1, -1, 45, -1, 45, -1, 45, 45, 45, 45, 45, -1, -1, 45, -1, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, -1, -1, 45, -1, ],
    [46, 46, 46, -1, -1, 46, -1, 46, -1, 46, 46, 46, 46, 46, -1, -1, 46, -1, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, -1, -1, 46, -1, ],
    [47, 47, 47, -1, -1, 47, -1, 47, -1, 47, 47, 47, 47, 47, -1, -1, 47, -1, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, -1, -1, 47, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [53, 53, 53, -1, -1, 53, -1, 53, -1, 53, 53, 53, 53, 53, -1, -1, 53, -1, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, -1, -1, 53, -1, ],
    [54, 54, 54, -1, -1, 54, -1, 54, -1, 54, 54, 54, 54, 54, -1, -1, 54, -1, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, -1, -1, 54, -1, ],
    [57, 57, 57, -1, -1, 57, -1, 57, -1, 57, 57, 57, 57, 57, -1, -1, 57, -1, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, -1, -1, 57, -1, ],
    [58, 58, 58, -1, -1, 58, -1, 58, -1, 58, 58, 58, 58, 58, -1, -1, 58, -1, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, -1, -1, 58, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [64, 64, 64, -1, -1, 64, 64, 64, 64, 64, 64, 64, 64, 64, -1, -1, 64, -1, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, -1, -1, 64, 64, ],
    [65, 65, 65, -1, -1, 65, 65, 65, 65, 65, 65, 65, 65, 65, -1, -1, 65, -1, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, -1, -1, 65, 65, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [60, 60, 60, -1, -1, 60, 60, 60, 60, 60, 60, 60, 60, 60, -1, -1, 60, -1, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, -1, -1, 60, 60, ],
    [62, 62, 62, -1, -1, 62, 62, -1, 62, 62, 62, 62, 62, 62, -1, -1, 62, -1, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, -1, -1, 62, 62, ],
    [61, 61, 61, -1, -1, 61, 61, 61, 61, 61, 61, 61, 61, 61, -1, -1, 61, -1, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, -1, -1, 61, 61, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [11, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [20, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, ],
    [41, 41, 41, -1, -1, 41, 41, 41, 41, 41, 41, 41, 41, 41, -1, -1, 41, -1, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, -1, -1, 41, 41, ],
    [49, 49, 49, -1, -1, 49, 49, 49, 49, 49, 49, 49, 49, 49, -1, -1, 49, -1, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, -1, -1, -1, -1, 49, 49, ],
    [55, 55, 55, -1, -1, 55, 55, 55, 55, 55, 55, 55, 55, 55, -1, -1, 55, -1, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, -1, -1, 55, 55, ],
    [51, 51, 51, -1, -1, 51, 51, 51, 51, 51, 51, 51, 51, 51, -1, -1, 51, -1, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, -1, -1, 51, 51, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [69, 69, 69, -1, -1, 69, 69, 69, 69, 69, 69, 69, 69, 69, -1, -1, 69, -1, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, -1, -1, 69, 69, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [71, 71, 71, -1, -1, 71, -1, 71, 71, 71, 71, 71, 71, 71, -1, -1, 71, -1, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, -1, -1, 71, 71, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [66, 66, 66, -1, -1, 66, 66, 66, 66, 66, 66, 66, 66, 66, -1, -1, 66, -1, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, -1, -1, 66, 66, ],
    [9, 9, 9, -1, -1, 9, -1, 9, -1, 9, 9, 9, 9, -1, -1, 9, 9, -1, 9, 9, 9, -1, -1, -1, -1, -1, -1, 9, 9, -1, -1, -1, -1, 9, 9, ],
    [10, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [24, 24, 24, -1, -1, 24, -1, 24, -1, 24, 24, 24, 24, -1, -1, 24, 24, -1, 24, 24, 24, -1, -1, -1, -1, -1, -1, 24, 24, -1, -1, -1, -1, 24, 24, ],
    [25, 25, 25, -1, -1, 25, -1, 25, -1, 25, 25, 25, 25, -1, -1, 25, 25, -1, 25, 25, 25, -1, -1, -1, -1, -1, -1, 25, 25, -1, -1, -1, -1, 25, 25, ],
    [26, 26, 26, -1, -1, 26, -1, 26, -1, 26, 26, 26, 26, -1, -1, 26, 26, -1, 26, 26, 26, -1, -1, -1, -1, -1, -1, 26, 26, -1, -1, -1, -1, 26, 26, ],
    [27, 27, 27, -1, -1, 27, -1, 27, -1, 27, 27, 27, 27, -1, -1, 27, 27, -1, 27, 27, 27, -1, -1, -1, -1, -1, -1, 27, 27, -1, -1, -1, -1, 27, 27, ],
    [28, 28, 28, -1, -1, 28, -1, 28, -1, 28, 28, 28, 28, -1, -1, 28, 28, -1, 28, 28, 28, -1, -1, -1, -1, -1, -1, 28, 28, -1, -1, -1, -1, 28, 28, ],
    [29, 29, 29, -1, -1, 29, -1, 29, -1, 29, 29, 29, 29, -1, -1, 29, 29, -1, 29, 29, 29, -1, -1, -1, -1, -1, -1, 29, 29, -1, -1, -1, -1, 29, 29, ],
    [30, 30, 30, -1, -1, 30, -1, 30, -1, 30, 30, 30, 30, -1, -1, 30, 30, -1, 30, 30, 30, -1, -1, -1, -1, -1, -1, 30, 30, -1, -1, -1, -1, 30, 30, ],
    [31, 31, 31, -1, -1, 31, -1, 31, -1, 31, 31, 31, 31, -1, -1, 31, 31, -1, 31, 31, 31, -1, -1, -1, -1, -1, -1, 31, 31, -1, -1, -1, -1, 31, 31, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [33, 33, 33, -1, -1, 33, -1, 33, -1, 33, 33, 33, 33, -1, -1, 33, 33, -1, 33, 33, 33, -1, -1, -1, -1, -1, -1, 33, 33, -1, -1, -1, -1, 33, 33, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [18, -1, -1, -1, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [63, 63, 63, -1, -1, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, 63, -1, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, 63, 63, ],
    [70, 70, 70, -1, -1, 70, 70, 70, 70, 70, 70, 70, 70, 70, -1, -1, 70, -1, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, -1, -1, 70, 70, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [22, 22, 22, -1, -1, 22, -1, 22, -1, 22, 22, 22, 22, -1, -1, 22, 22, 22, 22, 22, 22, -1, -1, -1, -1, -1, -1, 22, 22, -1, -1, -1, -1, 22, 22, ],
    [23, 23, 23, -1, -1, 23, -1, 23, -1, 23, 23, 23, 23, -1, -1, 23, 23, -1, 23, 23, 23, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, -1, -1, 23, 23, ],
    [32, 32, 32, -1, -1, 32, -1, 32, -1, 32, 32, 32, 32, -1, -1, 32, 32, -1, 32, 32, 32, -1, -1, -1, -1, -1, -1, 32, 32, -1, -1, -1, -1, 32, 32, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [72, 72, 72, -1, -1, 72, -1, 72, 72, 72, 72, 72, 72, 72, -1, -1, 72, -1, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, -1, -1, 72, 72, ],
    [63, 63, 63, -1, -1, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, 63, -1, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, -1, -1, 63, 63, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [39, 39, 39, -1, -1, 39, -1, 39, -1, 39, 39, 39, 39, -1, -1, 39, 39, -1, 39, 39, 39, -1, -1, -1, -1, -1, -1, 39, 39, -1, -1, -1, -1, 39, 39, ],
    [21, -1, -1, -1, -1, -1, -1, -1, 21, 21, 21, 21, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, ],
    [52, 52, 52, -1, -1, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 52, -1, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 52, 52, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [34, 34, 34, -1, -1, 34, -1, 34, -1, 34, 34, 34, 34, -1, -1, 34, 34, -1, 34, 34, 34, -1, -1, -1, -1, -1, -1, 34, 34, -1, -1, -1, -1, 34, 34, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [38, 38, 38, -1, -1, 38, -1, 38, -1, 38, 38, 38, 38, -1, -1, 38, 38, -1, 38, 38, 38, -1, -1, -1, -1, -1, -1, 38, 38, -1, -1, -1, -1, 38, 38, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [35, 35, 35, -1, -1, 35, -1, 35, -1, 35, 35, 35, 35, -1, -1, 35, 35, -1, 35, 35, 35, -1, -1, -1, -1, -1, -1, 35, 35, -1, -1, -1, -1, 35, 35, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [37, 37, 37, -1, -1, 37, -1, 37, -1, 37, 37, 37, 37, -1, -1, 37, 37, -1, 37, 37, 37, -1, -1, -1, -1, -1, -1, 37, 37, -1, -1, -1, -1, 37, 37, ],
    [36, 36, 36, -1, -1, 36, -1, 36, -1, 36, 36, 36, 36, -1, -1, 36, 36, -1, 36, 36, 36, -1, -1, -1, -1, -1, -1, 36, 36, -1, -1, -1, -1, 36, 36, ],
]
# Reduce Actions
def reduce_rule_1(p1):
    # PROGRAM -> DECL_LIST 
    result = p1

    result.type = PROGRAM
    return result

def reduce_rule_2(p1, p2):
    # DECL_LIST -> DECL_LIST DECL 
    result = p1
    
    append_node(result, p2)

    result.type = DECL_LIST
    return result

def reduce_rule_3(p1):
    # DECL_LIST -> DECL 
    result = p1

    result.type = DECL_LIST
    return result

def reduce_rule_4(p1):
    # DECL -> VAR_DECL 
    result = p1
    result.type = DECL
    return result

def reduce_rule_5(p1):
    # DECL -> FUNC_DECL 
    result = p1
    result.type = DECL
    return result

def reduce_rule_6(p1):
    # DECL -> COMMENT 
    result = p1
    p1.op_type = OpType.COMMENT

    result.type = DECL
    return result

def reduce_rule_7(p1, p2, p3):
    # VAR_DECL -> TYPE_SPEC ID ; 
    result = TreeNode()
    result.op_type = OpType.VAR_DECL
    result.childs[0] = p1
    result.childs[1] = p2

    result.type = VAR_DECL
    return result

def reduce_rule_8(p1, p2, p3, p4, p5):
    # VAR_DECL -> TYPE_SPEC ID = EXP ; 
   
    result = TreeNode()
    result.op_type = OpType.VAR_DECL
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[2] = p4

    result.type = VAR_DECL
    return result

def reduce_rule_9(p1, p2, p3, p4, p5, p6):
    # VAR_DECL -> TYPE_SPEC ID [ NUMBER ] ; 
   
    result = TreeNode()
    result.op_type = OpType.VAR_ARRAY_DECL
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[2] = p4

    result.type = VAR_DECL
    return result

def reduce_rule_10(p1, p2, p3, p4, p5, p6):
    # FUNC_DECL -> TYPE_SPEC ID ( PARAMS ) COMPOUND_STMT 
    result = TreeNode()
    result.op_type = OpType.FUNC_DECL
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[2] = p4
    result.childs[3] = p6


    result.type = FUNC_DECL
    return result

def reduce_rule_11(p1, p2, p3, p4, p5):
    # FUNC_DECL -> TYPE_SPEC ID ( ) COMPOUND_STMT 
    result = TreeNode()
    result.op_type = OpType.FUNC_DECL
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[2] = None
    result.childs[3] = p5

    result.type = FUNC_DECL
    return result

def reduce_rule_12(p1):
    # TYPE_SPEC -> INT 
    result = p1
    result.type = TYPE_SPEC
    return result

def reduce_rule_13(p1):
    # TYPE_SPEC -> FLOAT 
    result = p1
    result.type = TYPE_SPEC
    return result

def reduce_rule_14(p1):
    # TYPE_SPEC -> CHAR 
    result = p1
    result.type = TYPE_SPEC
    return result

def reduce_rule_15(p1):
    # TYPE_SPEC -> VOID 
    result = p1
    result.type = TYPE_SPEC
    return result

def reduce_rule_16(p1):
    # PARAMS -> PARAM_LIST 
    result = p1
    result.type = PARAMS
    return result

def reduce_rule_17(p1):
    # PARAMS -> VOID 
    result = p1
    result.type = PARAMS
    return result

def reduce_rule_18(p1, p2, p3):
    # PARAM_LIST -> PARAM_LIST , PARAM 
    result = p1
    append_node(result, p3)

    result.type = PARAM_LIST
    return result

def reduce_rule_19(p1):
    # PARAM_LIST -> PARAM 
    result = p1
    result.type = PARAM_LIST
    return result

def reduce_rule_20(p1, p2):
    # PARAM -> TYPE_SPEC ID 
    result = TreeNode()
    result.op_type = OpType.VAR_DECL
    result.childs[0] = p1
    result.childs[1] = p2

    result.type = PARAM
    return result

def reduce_rule_21(p1, p2, p3, p4, p5):
    # PARAM -> TYPE_SPEC ID [ NUMBER ] 
    result = TreeNode()
    result.op_type = OpType.VAR_ARRAY_DECL
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[1] = p4

    result.type = PARAM
    return result

def reduce_rule_22(p1, p2, p3):
    # COMPOUND_STMT -> { STMT_LIST } 
    result = p2;

    result.type = COMPOUND_STMT
    return result

def reduce_rule_23(p1, p2):
    # STMT_LIST -> STMT_LIST STMT 
    result = p1
    append_node(result, p2)

    result.type = STMT_LIST
    return result

def reduce_rule_24(p1):
    # STMT_LIST -> STMT 
    result = p1

    result.type = STMT_LIST
    return result

def reduce_rule_25(p1):
    # STMT -> EXP_STMT 
    result = p1
    result.type = STMT
    return result

def reduce_rule_26(p1):
    # STMT -> IF_STMT 
    result = p1
    result.type = STMT
    return result

def reduce_rule_27(p1):
    # STMT -> FOR_STMT 
    result = p1
    result.type = STMT
    return result

def reduce_rule_28(p1):
    # STMT -> WHILE_STMT 
    result = p1
    result.type = STMT
    return result

def reduce_rule_29(p1):
    # STMT -> VAR_DECL 
    result = p1
    result.type = STMT
    return result

def reduce_rule_30(p1):
    # STMT -> RETURN_STMT 
    result = p1
    result.type = STMT
    return result

def reduce_rule_31(p1):
    # STMT -> COMMENT 
    result = p1
    p1.op_type = OpType.COMMENT

    result.type = STMT
    return result

def reduce_rule_32(p1, p2):
    # EXP_STMT -> EXP ; 
    result = p1
    result.type = EXP_STMT
    return result

def reduce_rule_33(p1):
    # EXP_STMT -> ; 
    result = p1
    result.type = EXP_STMT
    return result

def reduce_rule_34(p1, p2, p3, p4, p5):
    # IF_STMT -> IF ( EXP ) COMPOUND_STMT 
    
    result = TreeNode()
    result.op_type = OpType.IF_STMT
    result.childs[0] = p3
    result.childs[1] = p5

    result.type = IF_STMT
    return result

def reduce_rule_35(p1, p2, p3, p4, p5, p6, p7):
    # IF_STMT -> IF ( EXP ) COMPOUND_STMT ELSE COMPOUND_STMT 
    result = TreeNode()
    result.op_type = OpType.IF_STMT
    result.childs[0] = p3
    result.childs[1] = p5
    result.childs[2] = p7

    result.type = IF_STMT
    return result

def reduce_rule_36(p1, p2, p3, p4, p5, p6, p7, p8, p9):
    # FOR_STMT -> FOR ( EXP ; EXP ; EXP ) COMPOUND_STMT 
    result = TreeNode()
    result.op_type = OpType.FOR_STMT
    result.childs[0] = p3
    result.childs[1] = p5
    result.childs[2] = p7
    result.childs[3] = p9

    result.type = FOR_STMT
    return result

def reduce_rule_37(p1, p2, p3, p4, p5, p6, p7, p8):
    # FOR_STMT -> FOR ( VAR_DECL EXP ; EXP ) COMPOUND_STMT 
    result = TreeNode()
    result.op_type = OpType.FOR_STMT
    result.childs[0] = p3
    result.childs[1] = p4
    result.childs[2] = p6
    result.childs[3] = p8

    result.type = FOR_STMT
    return result

def reduce_rule_38(p1, p2, p3, p4, p5):
    # WHILE_STMT -> WHILE ( EXP ) COMPOUND_STMT 
    result = TreeNode()
    result.op_type = OpType.WHILE_STMT
    result.childs[0] = p3
    result.childs[1] = p5

    result.type = WHILE_STMT
    return result

def reduce_rule_39(p1, p2, p3):
    # RETURN_STMT -> RETURN EXP ; 
    result = TreeNode()
    result.op_type = OpType.RETURN
    result.childs[0] = p2

    result.type = RETURN_STMT
    return result

def reduce_rule_40(p1):
    # EXP -> SIMPLE_EXP 
    result = p1
    result.type = EXP
    return result

def reduce_rule_41(p1, p2, p3):
    # EXP -> SIMPLE_EXP COMP_OP SIMPLE_EXP 
    result = TreeNode()
    result.op_type = OpType.EXP
    result.text = p2.text
    result.childs[0] = p1
    result.childs[1] = p3

    result.type = EXP
    return result

def reduce_rule_42(p1):
    # COMP_OP -> EQU 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_43(p1):
    # COMP_OP -> NEQ 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_44(p1):
    # COMP_OP -> LTE 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_45(p1):
    # COMP_OP -> GTE 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_46(p1):
    # COMP_OP -> LT 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_47(p1):
    # COMP_OP -> GT 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_48(p1):
    # SIMPLE_EXP -> ASSIGN_EXP 
    result = p1
    result.type = SIMPLE_EXP
    return result

def reduce_rule_49(p1, p2, p3):
    # SIMPLE_EXP -> TERM ADDOP TERM 
    result = TreeNode()
    result.op_type = OpType.EXP
    result.text = p2.text
    result.childs[0] = p1
    result.childs[1] = p3

    result.type = SIMPLE_EXP
    return result

def reduce_rule_50(p1):
    # SIMPLE_EXP -> TERM 
    result = p1
    result.type = SIMPLE_EXP
    return result

def reduce_rule_51(p1, p2, p3):
    # ASSIGN_EXP -> ID = EXP 
    result = TreeNode()
    result.op_type = OpType.ASSIGN_EXP
    result.text = p2.text
    result.childs[0] = p1
    result.childs[2] = p3

    result.type = ASSIGN_EXP
    return result

def reduce_rule_52(p1, p2, p3, p4, p5, p6):
    # ASSIGN_EXP -> ID [ EXP ] = EXP 
    result = TreeNode()
    result.op_type = OpType.ASSIGN_EXP
    result.text = p2.text
    result.childs[0] = p1
    result.childs[1] = p3
    result.childs[2] = p6

    result.type = ASSIGN_EXP
    return result

def reduce_rule_53(p1):
    # ADDOP -> + 
    result = p1
    result.type = ADDOP
    return result

def reduce_rule_54(p1):
    # ADDOP -> - 
    result = p1
    result.type = ADDOP
    return result

def reduce_rule_55(p1, p2, p3):
    # TERM -> TERM MULOP FACTOR 
    result = TreeNode()
    result.op_type = OpType.TERM
    result.text = p2.text
    result.childs[0] = p1
    result.childs[1] = p3

    result.type = TERM
    return result

def reduce_rule_56(p1):
    # TERM -> FACTOR 
    result = p1
    result.type = TERM
    return result

def reduce_rule_57(p1):
    # MULOP -> * 
    result = p1
    result.type = MULOP
    return result

def reduce_rule_58(p1):
    # MULOP -> / 
    result = p1
    result.type = MULOP
    return result

def reduce_rule_59(p1):
    # FACTOR -> NUMBER 
    # convert text into integer
    result = p1
    result.value = int(result.text)
    result.op_type = OpType.NUMBER

    result.type = FACTOR
    return result

def reduce_rule_60(p1, p2):
    # FACTOR -> + FACTOR 
    result = p2

    result.type = FACTOR
    return result

def reduce_rule_61(p1, p2):
    # FACTOR -> - FACTOR 
    result = TreeNode()
    result.op_type = OpType.EXP
    result.text = '*'
    
    result.childs[0] = TreeNode()
    result.childs[0].value = -1
    result.childs[0].op_type = OpType.NUMBER

    result.childs[1] = p2

    result.type = FACTOR
    return result

def reduce_rule_62(p1):
    # FACTOR -> ID 
    result = p1
    result.op_type = OpType.ID

    result.type = FACTOR
    return result

def reduce_rule_63(p1, p2, p3, p4):
    # FACTOR -> ID [ EXP ] 
    result = p1
    result.childs[2] = p3   # index
    result.op_type = OpType.ID

    result.type = FACTOR
    return result

def reduce_rule_64(p1, p2):
    # FACTOR -> ID ++ 
    result = TreeNode()
    result.childs[0] = p1
    result.op_type = OpType.INCREMENT

    result.type = FACTOR
    return result

def reduce_rule_65(p1, p2):
    # FACTOR -> ID -- 
    result = TreeNode()
    result.childs[0] = p1
    result.op_type = OpType.DECREMENT

    result.type = FACTOR
    return result

def reduce_rule_66(p1, p2, p3):
    # FACTOR -> ( EXP ) 
    result = p2

    result.type = FACTOR
    return result

def reduce_rule_67(p1):
    # FACTOR -> CALL 
    result = p1

    result.type = FACTOR
    return result

def reduce_rule_68(p1):
    # FACTOR -> STRING 
    result = p1
    result.op_type = OpType.STRING

    result.type = FACTOR
    return result

def reduce_rule_69(p1, p2, p3):
    # CALL -> ID ( ) 
    result = p1
    result.op_type = OpType.FUNC_CALL

    result.type = CALL
    return result

def reduce_rule_70(p1, p2, p3, p4):
    # CALL -> ID ( ARGS_LIST ) 
    result = p1
    result.childs[0] = p3
    result.op_type = OpType.FUNC_CALL

    result.type = CALL
    return result

def reduce_rule_71(p1):
    # ARGS_LIST -> EXP 
    result = p1

    result.type = ARGS_LIST
    return result

def reduce_rule_72(p1, p2, p3):
    # ARGS_LIST -> ARGS_LIST , EXP 
    result = p1
    append_node(result, p3)

    result.type = ARGS_LIST
    return result

# Embedded Actions
