"""
@fn examples/c_minus/cmm_parser.py
@brief LALR parser table generated by parser_generator.py
@date 2023-07-06 23:04:24
"""
# Definitions

import enum

class Symbol:
    def __init__(self):
        self.type = None
        self.text = None
        self.value = None
        self.node = None
        self.idx_line = 0
        self.idx_col = 0

class NodeType(enum.IntEnum):
    EXP = 0
    STMT = 1
    IF_STMT = 2
    TERM = 3

class Node:
    def __init__(self):
        self.type = NodeType.EXP
        self.next = None
        self.childs = [None] * 4


# Auxiliary Routines




# Parsing Table
NUM_TERMINALS = 21
NUM_NON_TERMINALS = 13
# Terminals
COMMENT = 0
IF = 2
ELSE = 7
FOR = 8
EQU = 9
LTE = 10
GTE = 11
LT = 12
GT = 13
ID = 14
NUMBER = 20
END__RESERVED = 21
# Non-Terminals
PROGRAM = 22
STMT_SEQ = 23
STMT = 24
IF_STMT = 25
FOR_STMT = 26
EXP = 27
COMP_OP = 28
SIMPLE_EXP = 29
ASSIGN_EXP = 30
ADDOP = 31
TERM = 32
MULOP = 33
FACTOR = 34
PROGRAMp = 35
yy_token_names = {
    'COMMENT':0, ';':1, 'IF':2, '(':3, ')':4, '{':5, '}':6, 'ELSE':7, 'FOR':8, 'EQU':9, 
    'LTE':10, 'GTE':11, 'LT':12, 'GT':13, 'ID':14, '=':15, '+':16, '-':17, '*':18, '/':19, 
    'NUMBER':20, 'END__RESERVED':21, 'PROGRAM':22, 'STMT_SEQ':23, 'STMT':24, 'IF_STMT':25, 'FOR_STMT':26, 'EXP':27, 'COMP_OP':28, 'SIMPLE_EXP':29, 
    'ASSIGN_EXP':30, 'ADDOP':31, 'TERM':32, 'MULOP':33, 'FACTOR':34, 'PROGRAMp':35
}
# RULE table
NUM_RULES = 33 # ACCEPT in tbl_reduce
tbl_rule = [
    [35,22,],    # 0 : PROGRAM' -> PROGRAM 
    [22,23,],    # 1 : PROGRAM -> STMT_SEQ 
    [22,0,],    # 2 : PROGRAM -> COMMENT 
    [23,23,24,],    # 3 : STMT_SEQ -> STMT_SEQ STMT 
    [23,24,],    # 4 : STMT_SEQ -> STMT 
    [23,0,],    # 5 : STMT_SEQ -> COMMENT 
    [24,27,1,],    # 6 : STMT -> EXP ; 
    [24,25,],    # 7 : STMT -> IF_STMT 
    [24,26,],    # 8 : STMT -> FOR_STMT 
    [24,1,],    # 9 : STMT -> ; 
    [25,2,3,27,4,5,23,6,],    # 10 : IF_STMT -> IF ( EXP ) { STMT_SEQ } 
    [25,2,3,27,4,5,23,6,7,5,23,6,],    # 11 : IF_STMT -> IF ( EXP ) { STMT_SEQ } ELSE { STMT_SEQ } 
    [26,8,3,27,1,27,1,27,4,5,23,6,],    # 12 : FOR_STMT -> FOR ( EXP ; EXP ; EXP ) { STMT_SEQ } 
    [27,29,],    # 13 : EXP -> SIMPLE_EXP 
    [27,29,28,29,],    # 14 : EXP -> SIMPLE_EXP COMP_OP SIMPLE_EXP 
    [28,9,],    # 15 : COMP_OP -> EQU 
    [28,10,],    # 16 : COMP_OP -> LTE 
    [28,11,],    # 17 : COMP_OP -> GTE 
    [28,12,],    # 18 : COMP_OP -> LT 
    [28,13,],    # 19 : COMP_OP -> GT 
    [29,30,],    # 20 : SIMPLE_EXP -> ASSIGN_EXP 
    [29,32,31,32,],    # 21 : SIMPLE_EXP -> TERM ADDOP TERM 
    [29,32,],    # 22 : SIMPLE_EXP -> TERM 
    [30,14,15,27,],    # 23 : ASSIGN_EXP -> ID = EXP 
    [31,16,],    # 24 : ADDOP -> + 
    [31,17,],    # 25 : ADDOP -> - 
    [32,32,33,34,],    # 26 : TERM -> TERM MULOP FACTOR 
    [32,34,],    # 27 : TERM -> FACTOR 
    [33,18,],    # 28 : MULOP -> * 
    [33,19,],    # 29 : MULOP -> / 
    [34,20,],    # 30 : FACTOR -> NUMBER 
    [34,14,],    # 31 : FACTOR -> ID 
    [34,3,27,4,],    # 32 : FACTOR -> ( EXP ) 
]
# SHIFT / GOTO table
# COMMENT ; IF ( ) { } ELSE FOR EQU LTE GTE LT GT ID = + - * / NUMBER $ PROGRAM STMT_SEQ STMT IF_STMT FOR_STMT EXP COMP_OP SIMPLE_EXP ASSIGN_EXP ADDOP TERM MULOP FACTOR 
tbl_shift = [
    [3, 8, 10, 17, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, 1, 2, 4, 6, 7, 5, -1, 9, 12, -1, 13, -1, 15, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 8, 10, 17, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, -1, 18, 6, 7, 5, -1, 9, 12, -1, 13, -1, 15, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 31, 32, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, 29, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, 35, -1, 9, 12, -1, 13, -1, 15, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, 36, 12, -1, 13, -1, 15, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, 37, -1, 9, 12, -1, 13, -1, 15, ],
    [-1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, 38, -1, 9, 12, -1, 13, -1, 15, ],
    [-1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, 15, ],
    [-1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, 42, -1, 9, 12, -1, 13, -1, 15, ],
    [-1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, 47, -1, 9, 12, -1, 13, -1, 15, ],
    [49, 8, 10, 17, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, 48, 4, 6, 7, 5, -1, 9, 12, -1, 13, -1, 15, ],
    [-1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 8, 10, 17, -1, -1, 51, -1, 11, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, -1, 18, 6, 7, 5, -1, 9, 12, -1, 13, -1, 15, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, 52, -1, 9, 12, -1, 13, -1, 15, ],
    [-1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [49, 8, 10, 17, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, 57, 4, 6, 7, 5, -1, 9, 12, -1, 13, -1, 15, ],
    [49, 8, 10, 17, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, 58, 4, 6, 7, 5, -1, 9, 12, -1, 13, -1, 15, ],
    [-1, 8, 10, 17, -1, -1, 59, -1, 11, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, -1, 18, 6, 7, 5, -1, 9, 12, -1, 13, -1, 15, ],
    [-1, 8, 10, 17, -1, -1, 60, -1, 11, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, 16, -1, -1, -1, 18, 6, 7, 5, -1, 9, 12, -1, 13, -1, 15, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
]
# REDUCE / ACCEPT table
tbl_reduce = [
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, ],
    [-1, 5, 5, 5, -1, -1, 5, -1, 5, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 5, 2, ],
    [-1, 4, 4, 4, -1, -1, 4, -1, 4, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, 4, 4, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 7, 7, 7, -1, -1, 7, -1, 7, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, 7, 7, ],
    [-1, 8, 8, 8, -1, -1, 8, -1, 8, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, 8, 8, ],
    [-1, 9, 9, 9, -1, -1, 9, -1, 9, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 9, 9, ],
    [-1, 13, 13, 13, 13, -1, -1, -1, 13, -1, -1, -1, -1, -1, 13, -1, 13, 13, 13, 13, 13, 13, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 20, 20, 20, 20, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, -1, 20, 20, 20, 20, 20, 20, ],
    [-1, 22, 22, 22, 22, -1, -1, -1, 22, 22, 22, 22, 22, 22, 22, -1, -1, -1, -1, -1, 22, 22, ],
    [-1, 31, 31, 31, 31, -1, -1, -1, 31, 31, 31, 31, 31, 31, 31, -1, 31, 31, 31, 31, 31, 31, ],
    [-1, 27, 27, 27, 27, -1, -1, -1, 27, 27, 27, 27, 27, 27, 27, -1, 27, 27, 27, 27, 27, 27, ],
    [-1, 30, 30, 30, 30, -1, -1, -1, 30, 30, 30, 30, 30, 30, 30, -1, 30, 30, 30, 30, 30, 30, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 3, 3, 3, -1, -1, 3, -1, 3, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, 3, 3, ],
    [-1, 6, 6, 6, -1, -1, 6, -1, 6, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 6, 6, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 15, 15, 15, -1, -1, -1, -1, 15, 15, 15, 15, 15, 15, 15, -1, 15, 15, 15, 15, 15, -1, ],
    [-1, 16, 16, 16, -1, -1, -1, -1, 16, 16, 16, 16, 16, 16, 16, -1, 16, 16, 16, 16, 16, -1, ],
    [-1, 17, 17, 17, -1, -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, -1, 17, 17, 17, 17, 17, -1, ],
    [-1, 18, 18, 18, -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, -1, 18, 18, 18, 18, 18, -1, ],
    [-1, 19, 19, 19, -1, -1, -1, -1, 19, 19, 19, 19, 19, 19, 19, -1, 19, 19, 19, 19, 19, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 24, 24, 24, -1, -1, -1, -1, 24, 24, 24, 24, 24, 24, 24, -1, 24, 24, 24, 24, 24, -1, ],
    [-1, 25, 25, 25, -1, -1, -1, -1, 25, 25, 25, 25, 25, 25, 25, -1, 25, 25, 25, 25, 25, -1, ],
    [-1, 28, 28, 28, -1, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, -1, 28, 28, 28, 28, 28, -1, ],
    [-1, 29, 29, 29, -1, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, -1, 29, 29, 29, 29, 29, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 14, 14, 14, 14, -1, -1, -1, 14, 14, 14, 14, 14, 14, 14, -1, 14, 14, 14, 14, 14, 14, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 21, 21, 21, 21, -1, -1, -1, 21, 21, 21, 21, 21, 21, 21, -1, 21, 21, -1, -1, 21, 21, ],
    [-1, 31, 31, 31, 31, -1, -1, -1, 31, 31, 31, 31, 31, 31, 31, -1, 31, 31, 31, 31, 31, 31, ],
    [-1, 26, 26, 26, 26, -1, -1, -1, 26, 26, 26, 26, 26, 26, 26, -1, 26, 26, 26, 26, 26, 26, ],
    [-1, 23, 23, 23, 23, -1, -1, -1, 23, 23, 23, 23, 23, 23, 23, -1, 23, 23, 23, 23, 23, 23, ],
    [-1, 32, 32, 32, 32, -1, -1, -1, 32, 32, 32, 32, 32, 32, 32, -1, 32, 32, 32, 32, 32, 32, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 5, 5, 5, -1, -1, 5, -1, 5, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 5, 5, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 10, 10, 10, -1, -1, 10, -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, 10, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 11, 11, 11, -1, -1, 11, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 11, ],
    [-1, 12, 12, 12, -1, -1, 12, -1, 12, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, 12, 12, ],
]
# Reduce Actions
def reduce_rule_1(p1):
    # PROGRAM -> STMT_SEQ 
    result = p1

    result.type = PROGRAM
    return result

def reduce_rule_2(p1):
    # PROGRAM -> COMMENT 
    result = p1
    result.type = PROGRAM
    return result

def reduce_rule_3(p1, p2):
    # STMT_SEQ -> STMT_SEQ STMT 
    result = p1
    node = p1.node

    while node.next is not None:
        node = node.next
    node.next = p2.node
    

    result.type = STMT_SEQ
    return result

def reduce_rule_4(p1):
    # STMT_SEQ -> STMT 
    result = p1

    result.type = STMT_SEQ
    return result

def reduce_rule_5(p1):
    # STMT_SEQ -> COMMENT 
    result = p1
    result.type = STMT_SEQ
    return result

def reduce_rule_6(p1, p2):
    # STMT -> EXP ; 
    result = p1
    result.type = STMT
    return result

def reduce_rule_7(p1):
    # STMT -> IF_STMT 
    result = p1
    result.type = STMT
    return result

def reduce_rule_8(p1):
    # STMT -> FOR_STMT 
    result = p1
    result.type = STMT
    return result

def reduce_rule_9(p1):
    # STMT -> ; 
    result = p1
    result.type = STMT
    return result

def reduce_rule_10(p1, p2, p3, p4, p5, p6, p7):
    # IF_STMT -> IF ( EXP ) { STMT_SEQ } 
    node = Node()
    node.type = NodeType.IF_STMT
    node.childs[0] = p3
    node.childs[1] = p6
    result = Symbol()
    result.node = node

    result.type = IF_STMT
    return result

def reduce_rule_11(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11):
    # IF_STMT -> IF ( EXP ) { STMT_SEQ } ELSE { STMT_SEQ } 
    node = Node()
    node.type = NodeType.IF_STMT
    node.childs[0] = p3
    node.childs[1] = p6
    node.childs[2] = p10
    result = Symbol()
    result.node = node

    result.type = IF_STMT
    return result

def reduce_rule_12(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11):
    # FOR_STMT -> FOR ( EXP ; EXP ; EXP ) { STMT_SEQ } 
    node = Node()
    node.type = NodeType.FOR_STMT
    node.childs[0] = p3
    node.childs[1] = p5
    node.childs[2] = p7
    node.childs[3] = p10
    result = Symbol()
    result.node = node

    result.type = FOR_STMT
    return result

def reduce_rule_13(p1):
    # EXP -> SIMPLE_EXP 
    result = p1
    result.type = EXP
    return result

def reduce_rule_14(p1, p2, p3):
    # EXP -> SIMPLE_EXP COMP_OP SIMPLE_EXP 
    node = Node()
    node.type = NodeType.EXP
    node.childs[0] = p1
    node.childs[1] = p2
    node.childs[2] = p3
    result = Symbol()
    result.node = node

    result.type = EXP
    return result

def reduce_rule_15(p1):
    # COMP_OP -> EQU 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_16(p1):
    # COMP_OP -> LTE 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_17(p1):
    # COMP_OP -> GTE 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_18(p1):
    # COMP_OP -> LT 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_19(p1):
    # COMP_OP -> GT 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_20(p1):
    # SIMPLE_EXP -> ASSIGN_EXP 
    result = p1
    result.type = SIMPLE_EXP
    return result

def reduce_rule_21(p1, p2, p3):
    # SIMPLE_EXP -> TERM ADDOP TERM 
    node = Node()
    node.type = NodeType.EXP
    node.childs[0] = p1
    node.childs[1] = p2
    node.childs[2] = p3
    result = Symbol()
    result.node = node

    result.type = SIMPLE_EXP
    return result

def reduce_rule_22(p1):
    # SIMPLE_EXP -> TERM 
    result = p1
    result.type = SIMPLE_EXP
    return result

def reduce_rule_23(p1, p2, p3):
    # ASSIGN_EXP -> ID = EXP 
    node = Node()
    node.type = NodeType.EXP
    node.childs[0] = p1
    node.childs[1] = p2
    node.childs[2] = p3
    result = Symbol()
    result.node = node

    result.type = ASSIGN_EXP
    return result

def reduce_rule_24(p1):
    # ADDOP -> + 
    result = p1
    result.type = ADDOP
    return result

def reduce_rule_25(p1):
    # ADDOP -> - 
    result = p1
    result.type = ADDOP
    return result

def reduce_rule_26(p1, p2, p3):
    # TERM -> TERM MULOP FACTOR 
    node = Node()
    node.type = NodeType.TERM
    node.childs[0] = p1
    node.childs[1] = p2
    node.childs[2] = p3
    result = Symbol()
    result.node = node

    result.type = TERM
    return result

def reduce_rule_27(p1):
    # TERM -> FACTOR 
    result = p1
    result.type = TERM
    return result

def reduce_rule_28(p1):
    # MULOP -> * 
    result = p1
    result.type = MULOP
    return result

def reduce_rule_29(p1):
    # MULOP -> / 
    result = p1
    result.type = MULOP
    return result

def reduce_rule_30(p1):
    # FACTOR -> NUMBER 
    result = p1
    result.type = FACTOR
    return result

def reduce_rule_31(p1):
    # FACTOR -> ID 
    result = p1
    result.type = FACTOR
    return result

def reduce_rule_32(p1, p2, p3):
    # FACTOR -> ( EXP ) 
    result = p2

    result.type = FACTOR
    return result

# Embedded Actions
