"""
@fn examples/c_minus/cmm_parser.py
@brief LALR parser table generated by parser_generator.py
@date 2023-07-05 23:54:50
"""
# Definitions

import enum

class Symbol:
    def __init__(self):
        self.type = None
        self.text = None
        self.value = None
        self.node = None
        self.idx_line = 0
        self.idx_col = 0

class NodeType(enum.IntEnum):
    EXP = 0
    STMT = 1
    IF_STMT = 2
    TERM = 3

class Node:
    def __init__(self):
        self.type = NodeType.EXP
        self.next = None
        self.childs = [None] * 4


# Auxiliary Routines




# Parsing Table
NUM_TERMINALS = 16
NUM_NON_TERMINALS = 11
# Terminals
COMMENT = 0
IF = 2
ELSE = 7
FOR = 8
ID = 9
NUMBER = 15
END__RESERVED = 16
# Non-Terminals
PROGRAM = 17
STMT_SEQ = 18
STMT = 19
IF_STMT = 20
FOR_STMT = 21
EXP = 22
ASSIGN_EXP = 23
ADDOP = 24
TERM = 25
MULOP = 26
FACTOR = 27
PROGRAMp = 28
yy_token_names = {
    'COMMENT':0, ';':1, 'IF':2, '(':3, ')':4, '{':5, '}':6, 'ELSE':7, 'FOR':8, 'ID':9, 
    '=':10, '+':11, '-':12, '*':13, '/':14, 'NUMBER':15, 'END__RESERVED':16, 'PROGRAM':17, 'STMT_SEQ':18, 'STMT':19, 
    'IF_STMT':20, 'FOR_STMT':21, 'EXP':22, 'ASSIGN_EXP':23, 'ADDOP':24, 'TERM':25, 'MULOP':26, 'FACTOR':27, 'PROGRAMp':28
}
# RULE table
NUM_RULES = 26 # ACCEPT in tbl_reduce
tbl_rule = [
    [28,17,],    # 0 : PROGRAM' -> PROGRAM 
    [17,18,],    # 1 : PROGRAM -> STMT_SEQ 
    [17,0,],    # 2 : PROGRAM -> COMMENT 
    [18,18,19,],    # 3 : STMT_SEQ -> STMT_SEQ STMT 
    [18,19,],    # 4 : STMT_SEQ -> STMT 
    [18,0,],    # 5 : STMT_SEQ -> COMMENT 
    [19,22,1,],    # 6 : STMT -> EXP ; 
    [19,20,],    # 7 : STMT -> IF_STMT 
    [19,21,],    # 8 : STMT -> FOR_STMT 
    [19,1,],    # 9 : STMT -> ; 
    [20,2,3,22,4,5,18,6,],    # 10 : IF_STMT -> IF ( EXP ) { STMT_SEQ } 
    [20,2,3,22,4,5,18,6,7,5,18,6,],    # 11 : IF_STMT -> IF ( EXP ) { STMT_SEQ } ELSE { STMT_SEQ } 
    [21,8,3,22,1,22,1,22,4,5,18,6,],    # 12 : FOR_STMT -> FOR ( EXP ; EXP ; EXP ) { STMT_SEQ } 
    [22,23,],    # 13 : EXP -> ASSIGN_EXP 
    [22,22,24,25,],    # 14 : EXP -> EXP ADDOP TERM 
    [22,25,],    # 15 : EXP -> TERM 
    [23,9,10,22,],    # 16 : ASSIGN_EXP -> ID = EXP 
    [24,11,],    # 17 : ADDOP -> + 
    [24,12,],    # 18 : ADDOP -> - 
    [25,25,26,27,],    # 19 : TERM -> TERM MULOP FACTOR 
    [25,27,],    # 20 : TERM -> FACTOR 
    [26,13,],    # 21 : MULOP -> * 
    [26,14,],    # 22 : MULOP -> / 
    [27,15,],    # 23 : FACTOR -> NUMBER 
    [27,9,],    # 24 : FACTOR -> ID 
    [27,3,22,4,],    # 25 : FACTOR -> ( EXP ) 
]
# SHIFT / GOTO table
# COMMENT ; IF ( ) { } ELSE FOR ID = + - * / NUMBER $ PROGRAM STMT_SEQ STMT IF_STMT FOR_STMT EXP ASSIGN_EXP ADDOP TERM MULOP FACTOR 
tbl_shift = [
    [3, 8, 11, 16, -1, -1, -1, -1, 12, 13, -1, -1, -1, -1, -1, 15, -1, 1, 2, 4, 6, 7, 5, 9, -1, 10, -1, 14, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 8, 11, 16, -1, -1, -1, -1, 12, 13, -1, -1, -1, -1, -1, 15, -1, -1, -1, 17, 6, 7, 5, 9, -1, 10, -1, 14, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, ],
    [-1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 16, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, 28, 9, -1, 10, -1, 14, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 16, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, 14, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 16, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 16, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, 32, 9, -1, 10, -1, 14, ],
    [-1, -1, -1, 16, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, 33, 9, -1, 10, -1, 14, ],
    [-1, -1, -1, 16, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, 34, 9, -1, 10, -1, 14, ],
    [-1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, ],
    [-1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 16, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, 39, 9, -1, 10, -1, 14, ],
    [41, 8, 11, 16, -1, -1, -1, -1, 12, 13, -1, -1, -1, -1, -1, 15, -1, -1, 40, 4, 6, 7, 5, 9, -1, 10, -1, 14, ],
    [-1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, ],
    [-1, 8, 11, 16, -1, -1, 43, -1, 12, 13, -1, -1, -1, -1, -1, 15, -1, -1, -1, 17, 6, 7, 5, 9, -1, 10, -1, 14, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, 16, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, 44, 9, -1, 10, -1, 14, ],
    [-1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [41, 8, 11, 16, -1, -1, -1, -1, 12, 13, -1, -1, -1, -1, -1, 15, -1, -1, 49, 4, 6, 7, 5, 9, -1, 10, -1, 14, ],
    [41, 8, 11, 16, -1, -1, -1, -1, 12, 13, -1, -1, -1, -1, -1, 15, -1, -1, 50, 4, 6, 7, 5, 9, -1, 10, -1, 14, ],
    [-1, 8, 11, 16, -1, -1, 51, -1, 12, 13, -1, -1, -1, -1, -1, 15, -1, -1, -1, 17, 6, 7, 5, 9, -1, 10, -1, 14, ],
    [-1, 8, 11, 16, -1, -1, 52, -1, 12, 13, -1, -1, -1, -1, -1, 15, -1, -1, -1, 17, 6, 7, 5, 9, -1, 10, -1, 14, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
]
# REDUCE / ACCEPT table
tbl_reduce = [
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, ],
    [-1, 5, 5, 5, -1, -1, 5, -1, 5, 5, -1, -1, -1, -1, -1, 5, 2, ],
    [-1, 4, 4, 4, -1, -1, 4, -1, 4, 4, -1, -1, -1, -1, -1, 4, 4, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 7, 7, 7, -1, -1, 7, -1, 7, 7, -1, -1, -1, -1, -1, 7, 7, ],
    [-1, 8, 8, 8, -1, -1, 8, -1, 8, 8, -1, -1, -1, -1, -1, 8, 8, ],
    [-1, 9, 9, 9, -1, -1, 9, -1, 9, 9, -1, -1, -1, -1, -1, 9, 9, ],
    [-1, 13, 13, 13, 13, -1, -1, -1, 13, 13, -1, 13, 13, 13, 13, 13, 13, ],
    [-1, 15, 15, 15, 15, -1, -1, -1, 15, 15, -1, 15, 15, -1, -1, 15, 15, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 24, 24, 24, 24, -1, -1, -1, 24, 24, -1, 24, 24, 24, 24, 24, 24, ],
    [-1, 20, 20, 20, 20, -1, -1, -1, 20, 20, -1, 20, 20, 20, 20, 20, 20, ],
    [-1, 23, 23, 23, 23, -1, -1, -1, 23, 23, -1, 23, 23, 23, 23, 23, 23, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 3, 3, 3, -1, -1, 3, -1, 3, 3, -1, -1, -1, -1, -1, 3, 3, ],
    [-1, 6, 6, 6, -1, -1, 6, -1, 6, 6, -1, -1, -1, -1, -1, 6, 6, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 17, 17, 17, -1, -1, -1, -1, 17, 17, -1, 17, 17, 17, 17, 17, -1, ],
    [-1, 18, 18, 18, -1, -1, -1, -1, 18, 18, -1, 18, 18, 18, 18, 18, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 21, 21, 21, -1, -1, -1, -1, 21, 21, -1, 21, 21, 21, 21, 21, -1, ],
    [-1, 22, 22, 22, -1, -1, -1, -1, 22, 22, -1, 22, 22, 22, 22, 22, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 14, 14, 14, 14, -1, -1, -1, 14, 14, -1, 14, 14, -1, -1, 14, 14, ],
    [-1, 24, 24, 24, 24, -1, -1, -1, 24, 24, -1, 24, 24, 24, 24, 24, 24, ],
    [-1, 19, 19, 19, 19, -1, -1, -1, 19, 19, -1, 19, 19, 19, 19, 19, 19, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 16, 16, 16, 16, -1, -1, -1, 16, 16, -1, -1, -1, 16, 16, 16, 16, ],
    [-1, 25, 25, 25, 25, -1, -1, -1, 25, 25, -1, 25, 25, 25, 25, 25, 25, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 5, 5, 5, -1, -1, 5, -1, 5, 5, -1, -1, -1, -1, -1, 5, 5, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 10, 10, 10, -1, -1, 10, -1, 10, 10, -1, -1, -1, -1, -1, 10, 10, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 11, 11, 11, -1, -1, 11, -1, 11, 11, -1, -1, -1, -1, -1, 11, 11, ],
    [-1, 12, 12, 12, -1, -1, 12, -1, 12, 12, -1, -1, -1, -1, -1, 12, 12, ],
]
# Reduce Actions
def reduce_rule_1(p1):
    # PROGRAM -> STMT_SEQ 
    result = Symbol()
    result = p1

    result.type = PROGRAM
    return result

def reduce_rule_2(p1):
    # PROGRAM -> COMMENT 
    result = Symbol()
    result = p1
    result.type = PROGRAM
    return result

def reduce_rule_3(p1, p2):
    # STMT_SEQ -> STMT_SEQ STMT 
    result = Symbol()
    result = p1
    node = p1.node

    while node.next is not None:
        node = node.next
    node.next = p2.node
    

    result.type = STMT_SEQ
    return result

def reduce_rule_4(p1):
    # STMT_SEQ -> STMT 
    result = Symbol()
    result = p1

    result.type = STMT_SEQ
    return result

def reduce_rule_5(p1):
    # STMT_SEQ -> COMMENT 
    result = Symbol()
    result = p1
    result.type = STMT_SEQ
    return result

def reduce_rule_6(p1, p2):
    # STMT -> EXP ; 
    result = Symbol()
    result = p1
    result.type = STMT
    return result

def reduce_rule_7(p1):
    # STMT -> IF_STMT 
    result = Symbol()
    result = p1
    result.type = STMT
    return result

def reduce_rule_8(p1):
    # STMT -> FOR_STMT 
    result = Symbol()
    result = p1
    result.type = STMT
    return result

def reduce_rule_9(p1):
    # STMT -> ; 
    result = Symbol()
    result = p1
    result.type = STMT
    return result

def reduce_rule_10(p1, p2, p3, p4, p5, p6, p7):
    # IF_STMT -> IF ( EXP ) { STMT_SEQ } 
    result = Symbol()
    node = Node()
    node.type = NodeType.IF_STMT
    node.childs[0] = p3
    node.childs[1] = p6

    result.node = node

    result.type = IF_STMT
    return result

def reduce_rule_11(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11):
    # IF_STMT -> IF ( EXP ) { STMT_SEQ } ELSE { STMT_SEQ } 
    result = Symbol()
    node = Node()
    node.type = NodeType.IF_STMT
    node.childs[0] = p3
    node.childs[1] = p6
    node.childs[2] = p10

    result.node = node

    result.type = IF_STMT
    return result

def reduce_rule_12(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11):
    # FOR_STMT -> FOR ( EXP ; EXP ; EXP ) { STMT_SEQ } 
    result = Symbol()
    node = Node()
    node.type = NodeType.FOR_STMT
    node.childs[0] = p3
    node.childs[1] = p5
    node.childs[2] = p7
    node.childs[3] = p10

    result.node = node

    result.type = FOR_STMT
    return result

def reduce_rule_13(p1):
    # EXP -> ASSIGN_EXP 
    result = Symbol()
    result = p1
    result.type = EXP
    return result

def reduce_rule_14(p1, p2, p3):
    # EXP -> EXP ADDOP TERM 
    result = Symbol()
    node = Node()
    node.type = NodeType.EXP
    node.childs[0] = p1
    node.childs[1] = p2
    node.childs[2] = p3

    result.node = node

    result.type = EXP
    return result

def reduce_rule_15(p1):
    # EXP -> TERM 
    result = Symbol()
    result = p1
    result.type = EXP
    return result

def reduce_rule_16(p1, p2, p3):
    # ASSIGN_EXP -> ID = EXP 
    result = Symbol()
    node = Node()
    node.type = NodeType.EXP
    node.childs[0] = p1
    node.childs[1] = p2
    node.childs[2] = p3

    result.node = node

    result.type = ASSIGN_EXP
    return result

def reduce_rule_17(p1):
    # ADDOP -> + 
    result = Symbol()
    result = p1
    result.type = ADDOP
    return result

def reduce_rule_18(p1):
    # ADDOP -> - 
    result = Symbol()
    result = p1
    result.type = ADDOP
    return result

def reduce_rule_19(p1, p2, p3):
    # TERM -> TERM MULOP FACTOR 
    result = Symbol()
    node = Node()
    node.type = NodeType.TERM
    node.childs[0] = p1
    node.childs[1] = p2
    node.childs[2] = p3

    result.node = node

    result.type = TERM
    return result

def reduce_rule_20(p1):
    # TERM -> FACTOR 
    result = Symbol()
    result = p1
    result.type = TERM
    return result

def reduce_rule_21(p1):
    # MULOP -> * 
    result = Symbol()
    result = p1
    result.type = MULOP
    return result

def reduce_rule_22(p1):
    # MULOP -> / 
    result = Symbol()
    result = p1
    result.type = MULOP
    return result

def reduce_rule_23(p1):
    # FACTOR -> NUMBER 
    result = Symbol()
    result = p1
    result.type = FACTOR
    return result

def reduce_rule_24(p1):
    # FACTOR -> ID 
    result = Symbol()
    result = p1
    result.type = FACTOR
    return result

def reduce_rule_25(p1, p2, p3):
    # FACTOR -> ( EXP ) 
    result = Symbol()
    result = p2

    result.type = FACTOR
    return result

# Embedded Actions
