"""
@fn examples/c_minus/cmm_parser.py
@brief LALR parser table generated by parser_generator.py
@date 2023-09-02 07:55:15
"""
# Definitions

import enum

# input: symbol/node -> symbol?
# return: symbol

class SymbolInfo:
    def __init__(self):
        self.name = ''
        self.value = ''
        self.init = False
        self.type = 0

class SymbolTable:
    def __init__(self):
        self.symbols = {}
        self.parent = None
        self.child = None


class OpType(enum.IntEnum):
    TERMINAL = 0
    EXP = 1
    STMT = 2
    IF_STMT = 3
    TERM = 4
    VAR_DECL = 5

class TreeNode:
    def __init__(self):
        self.type = None
        self.text = None
        self.value = None
        self.idx_line = 0
        self.idx_col = 0
        self.symbol_table = SymbolTable()

        self.op_type = OpType.TERMINAL
        self.next = None
        self.childs = [None] * 4

# Auxiliary Routines

def merge_symbol_table(src, dst):
    # This function merges symbol tables
    for key in src.symbol_table.symbols:
        if key not in dst.symbol_table.symbols:
            dst.symbol_table.symbols[key] = src.symbol_table.symbols[key]


# Parsing Table
NUM_TERMINALS = 25
NUM_NON_TERMINALS = 15
# Terminals
COMMENT = 0
INT = 1
FLOAT = 2
CHAR = 3
VOID = 4
ID = 5
IF = 8
ELSE = 13
FOR = 14
EQU = 15
LTE = 16
GTE = 17
LT = 18
GT = 19
NUMBER = 24
END__RESERVED = 25
# Non-Terminals
PROGRAM = 26
TYPE_SPEC = 27
VAR_DECL = 28
STMT_SEQ = 29
STMT = 30
IF_STMT = 31
FOR_STMT = 32
EXP = 33
COMP_OP = 34
SIMPLE_EXP = 35
ASSIGN_EXP = 36
ADDOP = 37
TERM = 38
MULOP = 39
FACTOR = 40
PROGRAMp = 41
yy_token_names = {
    'COMMENT':0, 'INT':1, 'FLOAT':2, 'CHAR':3, 'VOID':4, 'ID':5, ';':6, '=':7, 'IF':8, '(':9, 
    ')':10, '{':11, '}':12, 'ELSE':13, 'FOR':14, 'EQU':15, 'LTE':16, 'GTE':17, 'LT':18, 'GT':19, 
    '+':20, '-':21, '*':22, '/':23, 'NUMBER':24, 'END__RESERVED':25, 'PROGRAM':26, 'TYPE_SPEC':27, 'VAR_DECL':28, 'STMT_SEQ':29, 
    'STMT':30, 'IF_STMT':31, 'FOR_STMT':32, 'EXP':33, 'COMP_OP':34, 'SIMPLE_EXP':35, 'ASSIGN_EXP':36, 'ADDOP':37, 'TERM':38, 'MULOP':39, 
    'FACTOR':40, 'PROGRAMp':41
}
# RULE table
NUM_RULES = 40 # ACCEPT in tbl_reduce
tbl_rule = [
    [41,26,],    # 0 : PROGRAM' -> PROGRAM 
    [26,29,],    # 1 : PROGRAM -> STMT_SEQ 
    [26,0,],    # 2 : PROGRAM -> COMMENT 
    [27,1,],    # 3 : TYPE_SPEC -> INT 
    [27,2,],    # 4 : TYPE_SPEC -> FLOAT 
    [27,3,],    # 5 : TYPE_SPEC -> CHAR 
    [27,4,],    # 6 : TYPE_SPEC -> VOID 
    [28,27,5,6,],    # 7 : VAR_DECL -> TYPE_SPEC ID ; 
    [28,27,5,7,33,6,],    # 8 : VAR_DECL -> TYPE_SPEC ID = EXP ; 
    [29,29,30,],    # 9 : STMT_SEQ -> STMT_SEQ STMT 
    [29,30,],    # 10 : STMT_SEQ -> STMT 
    [29,0,],    # 11 : STMT_SEQ -> COMMENT 
    [30,33,6,],    # 12 : STMT -> EXP ; 
    [30,31,],    # 13 : STMT -> IF_STMT 
    [30,32,],    # 14 : STMT -> FOR_STMT 
    [30,6,],    # 15 : STMT -> ; 
    [30,28,],    # 16 : STMT -> VAR_DECL 
    [31,8,9,33,10,11,29,12,],    # 17 : IF_STMT -> IF ( EXP ) { STMT_SEQ } 
    [31,8,9,33,10,11,29,12,13,11,29,12,],    # 18 : IF_STMT -> IF ( EXP ) { STMT_SEQ } ELSE { STMT_SEQ } 
    [32,14,9,33,6,33,6,33,10,11,29,12,],    # 19 : FOR_STMT -> FOR ( EXP ; EXP ; EXP ) { STMT_SEQ } 
    [33,35,],    # 20 : EXP -> SIMPLE_EXP 
    [33,35,34,35,],    # 21 : EXP -> SIMPLE_EXP COMP_OP SIMPLE_EXP 
    [34,15,],    # 22 : COMP_OP -> EQU 
    [34,16,],    # 23 : COMP_OP -> LTE 
    [34,17,],    # 24 : COMP_OP -> GTE 
    [34,18,],    # 25 : COMP_OP -> LT 
    [34,19,],    # 26 : COMP_OP -> GT 
    [35,36,],    # 27 : SIMPLE_EXP -> ASSIGN_EXP 
    [35,38,37,38,],    # 28 : SIMPLE_EXP -> TERM ADDOP TERM 
    [35,38,],    # 29 : SIMPLE_EXP -> TERM 
    [36,5,7,33,],    # 30 : ASSIGN_EXP -> ID = EXP 
    [37,20,],    # 31 : ADDOP -> + 
    [37,21,],    # 32 : ADDOP -> - 
    [38,38,39,40,],    # 33 : TERM -> TERM MULOP FACTOR 
    [38,40,],    # 34 : TERM -> FACTOR 
    [39,22,],    # 35 : MULOP -> * 
    [39,23,],    # 36 : MULOP -> / 
    [40,24,],    # 37 : FACTOR -> NUMBER 
    [40,5,],    # 38 : FACTOR -> ID 
    [40,9,33,10,],    # 39 : FACTOR -> ( EXP ) 
]
# SHIFT / GOTO table
# COMMENT INT FLOAT CHAR VOID ID ; = IF ( ) { } ELSE FOR EQU LTE GTE LT GT + - * / NUMBER $ PROGRAM TYPE_SPEC VAR_DECL STMT_SEQ STMT IF_STMT FOR_STMT EXP COMP_OP SIMPLE_EXP ASSIGN_EXP ADDOP TERM MULOP FACTOR 
tbl_shift = [
    [3, 16, 17, 18, 19, 20, 8, -1, 11, 23, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, 1, 13, 9, 2, 4, 6, 7, 5, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 16, 17, 18, 19, 20, 8, -1, 11, 23, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 13, 9, -1, 24, 6, 7, 5, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 38, 39, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 36, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, -1, 46, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 49, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, 21, ],
    [-1, -1, -1, -1, -1, 49, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [60, 16, 17, 18, 19, 20, 8, -1, 11, 23, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 13, 9, 59, 4, 6, 7, 5, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 16, 17, 18, 19, 20, 8, -1, 11, 23, -1, -1, 62, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 13, 9, -1, 24, 6, 7, 5, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [60, 16, 17, 18, 19, 20, 8, -1, 11, 23, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 13, 9, 68, 4, 6, 7, 5, -1, 10, 14, -1, 15, -1, 21, ],
    [60, 16, 17, 18, 19, 20, 8, -1, 11, 23, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 13, 9, 69, 4, 6, 7, 5, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, 16, 17, 18, 19, 20, 8, -1, 11, 23, -1, -1, 70, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 13, 9, -1, 24, 6, 7, 5, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, 16, 17, 18, 19, 20, 8, -1, 11, 23, -1, -1, 71, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 13, 9, -1, 24, 6, 7, 5, -1, 10, 14, -1, 15, -1, 21, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
]
# REDUCE / ACCEPT table
tbl_reduce = [
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, ],
    [-1, 11, 11, 11, 11, 11, 11, -1, 11, 11, -1, -1, 11, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 2, ],
    [-1, 10, 10, 10, 10, 10, 10, -1, 10, 10, -1, -1, 10, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 13, 13, 13, 13, 13, 13, -1, 13, 13, -1, -1, 13, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 13, ],
    [-1, 14, 14, 14, 14, 14, 14, -1, 14, 14, -1, -1, 14, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 14, ],
    [-1, 15, 15, 15, 15, 15, 15, -1, 15, 15, -1, -1, 15, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 15, ],
    [-1, 16, 16, 16, 16, 16, 16, -1, 16, 16, -1, -1, 16, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, ],
    [-1, 20, 20, 20, 20, 20, 20, -1, 20, 20, 20, -1, -1, -1, 20, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 27, 27, 27, 27, 27, 27, -1, 27, 27, 27, -1, -1, -1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, ],
    [-1, 29, 29, 29, 29, 29, 29, -1, 29, 29, 29, -1, -1, -1, 29, 29, 29, 29, 29, 29, -1, -1, -1, -1, 29, 29, ],
    [-1, 3, 3, 3, 3, 3, 3, -1, 3, 3, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, ],
    [-1, 4, 4, 4, 4, 4, 4, -1, 4, 4, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, ],
    [-1, 5, 5, 5, 5, 5, 5, -1, 5, 5, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, ],
    [-1, 6, 6, 6, 6, 6, 6, -1, 6, 6, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, ],
    [-1, 38, 38, 38, 38, 38, 38, -1, 38, 38, 38, -1, -1, -1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, ],
    [-1, 34, 34, 34, 34, 34, 34, -1, 34, 34, 34, -1, -1, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, ],
    [-1, 37, 37, 37, 37, 37, 37, -1, 37, 37, 37, -1, -1, -1, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 9, 9, 9, 9, 9, 9, -1, 9, 9, -1, -1, 9, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 9, ],
    [-1, 12, 12, 12, 12, 12, 12, -1, 12, 12, -1, -1, 12, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 22, 22, 22, 22, 22, 22, -1, 22, 22, -1, -1, -1, -1, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, -1, ],
    [-1, 23, 23, 23, 23, 23, 23, -1, 23, 23, -1, -1, -1, -1, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, -1, ],
    [-1, 24, 24, 24, 24, 24, 24, -1, 24, 24, -1, -1, -1, -1, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, -1, ],
    [-1, 25, 25, 25, 25, 25, 25, -1, 25, 25, -1, -1, -1, -1, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, -1, ],
    [-1, 26, 26, 26, 26, 26, 26, -1, 26, 26, -1, -1, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 31, 31, 31, 31, 31, 31, -1, 31, 31, -1, -1, -1, -1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, -1, ],
    [-1, 32, 32, 32, 32, 32, 32, -1, 32, 32, -1, -1, -1, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, ],
    [-1, 35, 35, 35, 35, 35, 35, -1, 35, 35, -1, -1, -1, -1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, -1, ],
    [-1, 36, 36, 36, 36, 36, 36, -1, 36, 36, -1, -1, -1, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 21, 21, 21, 21, 21, 21, -1, 21, 21, 21, -1, -1, -1, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 7, 7, 7, 7, 7, 7, -1, 7, 7, -1, -1, 7, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 28, 28, 28, 28, 28, 28, -1, 28, 28, 28, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, -1, -1, 28, 28, ],
    [-1, 38, 38, 38, 38, 38, 38, -1, 38, 38, 38, -1, -1, -1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, ],
    [-1, 33, 33, 33, 33, 33, 33, -1, 33, 33, 33, -1, -1, -1, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, ],
    [-1, 30, 30, 30, 30, 30, 30, -1, 30, 30, 30, -1, -1, -1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, ],
    [-1, 39, 39, 39, 39, 39, 39, -1, 39, 39, 39, -1, -1, -1, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 8, 8, 8, 8, 8, 8, -1, 8, 8, -1, -1, 8, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 8, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 11, 11, 11, 11, 11, 11, -1, 11, 11, -1, -1, 11, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 17, 17, 17, 17, 17, 17, -1, 17, 17, -1, -1, 17, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
    [-1, 18, 18, 18, 18, 18, 18, -1, 18, 18, -1, -1, 18, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 18, ],
    [-1, 19, 19, 19, 19, 19, 19, -1, 19, 19, -1, -1, 19, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 19, ],
]
# Reduce Actions
def reduce_rule_1(p1):
    # PROGRAM -> STMT_SEQ 
    result = p1

    result.type = PROGRAM
    return result

def reduce_rule_2(p1):
    # PROGRAM -> COMMENT 
    result = p1
    result.type = PROGRAM
    return result

def reduce_rule_3(p1):
    # TYPE_SPEC -> INT 
    result = p1
    result.type = TYPE_SPEC
    return result

def reduce_rule_4(p1):
    # TYPE_SPEC -> FLOAT 
    result = p1
    result.type = TYPE_SPEC
    return result

def reduce_rule_5(p1):
    # TYPE_SPEC -> CHAR 
    result = p1
    result.type = TYPE_SPEC
    return result

def reduce_rule_6(p1):
    # TYPE_SPEC -> VOID 
    result = p1
    result.type = TYPE_SPEC
    return result

def reduce_rule_7(p1, p2, p3):
    # VAR_DECL -> TYPE_SPEC ID ; 
    
    
    result = TreeNode()
    result.op_type = OpType.VAR_DECL
    result.childs[0] = p1
    result.childs[1] = p2

    result.symbol_table.symbols[p2.text] = [p1.text, 0]


    result.type = VAR_DECL
    return result

def reduce_rule_8(p1, p2, p3, p4, p5):
    # VAR_DECL -> TYPE_SPEC ID = EXP ; 
   
    result = TreeNode()
    result.op_type = OpType.VAR_DECL
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[2] = p4

    result.symbol_table.symbols[p2.text] = [p1.text, p4.text]

    result.type = VAR_DECL
    return result

def reduce_rule_9(p1, p2):
    # STMT_SEQ -> STMT_SEQ STMT 
    result = p1
    node = p1
    while node.next is not None:
        node = node.next
    result.next = p2

    merge_symbol_table(p2, result)

    result.type = STMT_SEQ
    return result

def reduce_rule_10(p1):
    # STMT_SEQ -> STMT 
    result = p1

    result.type = STMT_SEQ
    return result

def reduce_rule_11(p1):
    # STMT_SEQ -> COMMENT 
    result = p1
    result.type = STMT_SEQ
    return result

def reduce_rule_12(p1, p2):
    # STMT -> EXP ; 
    result = p1
    result.type = STMT
    return result

def reduce_rule_13(p1):
    # STMT -> IF_STMT 
    result = p1
    result.type = STMT
    return result

def reduce_rule_14(p1):
    # STMT -> FOR_STMT 
    result = p1
    result.type = STMT
    return result

def reduce_rule_15(p1):
    # STMT -> ; 
    result = p1
    result.type = STMT
    return result

def reduce_rule_16(p1):
    # STMT -> VAR_DECL 
    result = p1
    result.type = STMT
    return result

def reduce_rule_17(p1, p2, p3, p4, p5, p6, p7):
    # IF_STMT -> IF ( EXP ) { STMT_SEQ } 
    
    result = TreeNode()
    result.op_type = OpType.IF_STMT
    result.childs[0] = p3
    result.childs[1] = p6

    result.type = IF_STMT
    return result

def reduce_rule_18(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11):
    # IF_STMT -> IF ( EXP ) { STMT_SEQ } ELSE { STMT_SEQ } 
    result = TreeNode()
    result.op_type = OpType.IF_STMT
    result.childs[0] = p3
    result.childs[1] = p6
    result.childs[2] = p10

    result.type = IF_STMT
    return result

def reduce_rule_19(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11):
    # FOR_STMT -> FOR ( EXP ; EXP ; EXP ) { STMT_SEQ } 
    result = TreeNode()
    result.op_type = OpType.FOR_STMT
    result.childs[0] = p3
    result.childs[1] = p5
    result.childs[2] = p7
    result.childs[3] = p10

    result.type = FOR_STMT
    return result

def reduce_rule_20(p1):
    # EXP -> SIMPLE_EXP 
    result = p1
    result.type = EXP
    return result

def reduce_rule_21(p1, p2, p3):
    # EXP -> SIMPLE_EXP COMP_OP SIMPLE_EXP 
    result = TreeNode()
    result.op_type = OpType.EXP
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[2] = p3

    result.type = EXP
    return result

def reduce_rule_22(p1):
    # COMP_OP -> EQU 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_23(p1):
    # COMP_OP -> LTE 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_24(p1):
    # COMP_OP -> GTE 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_25(p1):
    # COMP_OP -> LT 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_26(p1):
    # COMP_OP -> GT 
    result = p1
    result.type = COMP_OP
    return result

def reduce_rule_27(p1):
    # SIMPLE_EXP -> ASSIGN_EXP 
    result = p1
    result.type = SIMPLE_EXP
    return result

def reduce_rule_28(p1, p2, p3):
    # SIMPLE_EXP -> TERM ADDOP TERM 
    result = TreeNode()
    result.op_type = OpType.EXP
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[2] = p3

    result.type = SIMPLE_EXP
    return result

def reduce_rule_29(p1):
    # SIMPLE_EXP -> TERM 
    result = p1
    result.type = SIMPLE_EXP
    return result

def reduce_rule_30(p1, p2, p3):
    # ASSIGN_EXP -> ID = EXP 
    result = TreeNode()
    result.op_type = OpType.EXP
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[2] = p3

    result.type = ASSIGN_EXP
    return result

def reduce_rule_31(p1):
    # ADDOP -> + 
    result = p1
    result.type = ADDOP
    return result

def reduce_rule_32(p1):
    # ADDOP -> - 
    result = p1
    result.type = ADDOP
    return result

def reduce_rule_33(p1, p2, p3):
    # TERM -> TERM MULOP FACTOR 
    result = TreeNode()
    result.op_type = OpType.TERM
    result.childs[0] = p1
    result.childs[1] = p2
    result.childs[2] = p3

    result.type = TERM
    return result

def reduce_rule_34(p1):
    # TERM -> FACTOR 
    result = p1
    result.type = TERM
    return result

def reduce_rule_35(p1):
    # MULOP -> * 
    result = p1
    result.type = MULOP
    return result

def reduce_rule_36(p1):
    # MULOP -> / 
    result = p1
    result.type = MULOP
    return result

def reduce_rule_37(p1):
    # FACTOR -> NUMBER 
    result = p1
    result.type = FACTOR
    return result

def reduce_rule_38(p1):
    # FACTOR -> ID 
    result = p1
    result.type = FACTOR
    return result

def reduce_rule_39(p1, p2, p3):
    # FACTOR -> ( EXP ) 
    result = p2

    result.type = FACTOR
    return result

# Embedded Actions
