%{
class Symbol:
    def __init__(self):
        self.type = None
        self.value = None
        self.pattern = None

class Pattern:
    VALUE = 0
    RANGE = 1
    CLASS = 2
    GROUP = 3

    def __init__(self):
        self.type = Pattern.VALUE
        self.value = None
        self.range_min = None
        self.range_max = None
        self.child = None
        self.next = None
        self.count_min = 1
        self.count_max = 1
        self.matched = False
        self.matched_str = ''
        self.matched_count = 0
        self.idx_begin = 0
        self.idx_end = 0

%}

%%

CMD : EXP {
    $$ = $1
};

EXP : SUBEXP EXP {    
    $1.pattern.next = $2.pattern
    $$ = $1
} |
SUBEXP |
EXP OR SUBEXP
;

SUBEXP : CLASS |
CHAR {
    pattern = Pattern()
    pattern.type = Pattern.VALUE
    pattern.value = $1.value
    $$.pattern = pattern
} |
GROUP |
SUBEXP COUNT {
    $1.pattern.count_min = $2.pattern.count_min
    $1.pattern.count_max = $2.pattern.count_max
    $$ = $1
}
;

GROUP : ( EXP ) {
    pattern = Pattern()
    pattern.type = Pattern.GROUP
    pattern.child = $2.pattern

    $$.pattern = pattern
}
;

CLASS : [ TERM ] {
    pattern = Pattern()
    pattern.type = Pattern.CLASS
    pattern.child = $2.pattern    
    $$.pattern = pattern
};

TERM : FACTOR TERM {    
    $1.pattern.next = $2.pattern
    $$ = $1
} |
FACTOR | 
FACTOR -
;

FACTOR : CHAR {
    pattern = Pattern()
    pattern.type = Pattern.VALUE
    pattern.value = $1.value
    $$.pattern = pattern
} |
CHAR - CHAR {
    pattern = Pattern()
    pattern.type = Pattern.RANGE
    pattern.range_min = $1.value
    pattern.range_max = $3.value
    $$.pattern = pattern
} |
ESC
;

COUNT : + {
    pattern = Pattern()
    pattern.count_min = 0
    pattern.count_max = -1
    $$.pattern = pattern
} |
* {
    pattern = Pattern()
    pattern.count_min = 1
    pattern.count_max = -1
    $$.pattern = pattern
}| 
? {
    pattern = Pattern()
    pattern.count_min = 0
    pattern.count_max = 1
    $$.pattern = pattern
}
;
%%

